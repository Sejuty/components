 const [dragging, setDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);
  const gridRef = useRef(null);

  const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      const walk = (x - startX) * 3;
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };




 <div className="bg-white rounded w-[72px] h-[72px] mr-[16px] mt-[16px] mb-[16px]">
      <div className="flex justify-between items-center">
        <h2 className="text-sm font-medium">Card Title</h2>
        <div className="relative inline-block text-left">
          <button
            onClick={handleDropdownToggle}
            className="focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen && (
            <div className="absolute z-10 right-0 mt-2 w-30 rounded shadow-lg bg-white divide-y divide-gray-100">
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Delete
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>

      // const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  // const handleDropdownToggle = () => {
  //   setIsDropdownOpen(!isDropdownOpen);
  // };

    const handleDeleteGrid = (index) => {
    const newGrid = [...grid];
    newGrid.splice(index, 1);
    setGrid(newGrid);
  };



   <div className=" bg-purple-500 min-w-[104px] max-w-[368px] h-[104px] m-6 rounded hello">
      <div className="relative bg-purple-500 rounded">
        <div
          // onMouseDown={handleMouseDown}
          // onMouseMove={handleMouseMove}
          // onMouseLeave={handleMouseUp}
          // onMouseUp={handleMouseUp}
          ref={gridRef}
          className="cursor cursor-pointer flex flex-row overflow-x-scroll min-w-[102px] max-w-[280px] pl-[8px]"
        >
          <Grid
            grid={grid}
            handleDeleteGrid={handleDeleteGrid}
            handleDropdownToggle={handleDropdownToggle}
            isDropdownOpen={isDropdownOpen}
            dropdown={dropdown}
          />
        </div>
        <div
          onClick={handleAddGrid}
          className="cursor-pointer p-[10px] text-4xl cursor-ponter bg-white rounded w-[72px] h-[72px] "
        >
          +
        </div>
      </div>
    </div>

     <button
            onClick={(e) => handleDropdownToggle(index)}
            className="focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen[index] && (
            <div className="absolute z-10 right-0 mt-2 w-30 rounded shadow-lg bg-white divide-y divide-gray-100">
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button
                  onClick={() => handleDeleteGrid(index)}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                >
                  Delete
                </button>
              </div>
            </div>
          )}












          <Grid
            grid={grid}
            handleDeleteGrid={handleDeleteGrid}
            handleDropdownToggle={handleDropdownToggle}
            isDropdownOpen={isDropdownOpen}
            dropdown={dropdown}
          />

            <div className="bg-purple-500 w-fit max-w-[368px] rounded m-4">
      <div className="flex relative bg-purple-500 rounded">
        <div
          // onMouseDown={handleMouseDown}
          // onMouseMove={handleMouseMove}
          // onMouseLeave={handleMouseUp}
          // onMouseUp={handleMouseUp}
          ref={gridRef}
          className="cursor cursor-pointer flex flex-row overflow-x-scroll w-fit max-w-[280px] space-x-4"
        >
          
        </div>
        <div
          onClick={handleAddGrid}
          className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
        >
          +
        </div>
      </div>



      {checkArrayLength ? (
            <div
              ref={gridRef}
              className="pl-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[260px]"
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
              />
            </div>
          ) : null}
          {checkArrayLength < 8 ? (
            <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">
              <div
                onClick={handleAddGrid}
                className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
              >
                +
              </div>
            </div>
          ) : null}




            const handleMouseDown = (event) => {
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      console.log("x", x);
      const walk = x - startX;
      console.log("walk", walk);
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };

    const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      const walk = x - startX;
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

    const handleMouseUp = () => {
    setDragging(false);
  };


    <div className="relative flex bg-purple-500 rounded">
          {checkArrayLength === 0 ? (
            null
          ) : checkArrayLength === 8 ? (
            <div
              ref={sliderRef}
              className="absolute pl-4 pr-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[368px]"
              onScroll={handleScroll}
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
                scrollLeft = {scrollLeft}
                sliderRef = {sliderRef}
              />
            </div>
          ) : (
            <div
              ref={sliderRef}
              className="pl-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[264px]"
              onScroll={handleScroll}
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
                handleScroll = {handleScroll}
                scrollLeft = {scrollLeft}
                sliderRef = {sliderRef}
              />
            </div>
          )}
          {checkArrayLength < 8 ? (
            <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">
              <div
                onClick={handleAddGrid}
                className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
              >
                +
              </div>
            </div>
          ) : null}
        </div>



        
          <button
            onClick={(e) =>{
              handleDropdownToggle(index)
            }}
            className=" focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen[index] && (
            <div className={`absolute z-30 left-0 mt-2 w-[100px] rounded shadow-lg bg-white divide-y divide-gray-100`}>
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button
                  onClick={() => handleDeleteGrid(index)}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                >
                  Delete
                </button>
              </div>
            </div>
          )}

             <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">




              <div>
        <div className="relative flex bg-purple-500 rounded">
       <div className="relative max-w-[368px]">
       <div className="absolute pl-4 pr-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit ">
            <Grid
              grid={grid}
              handleDeleteGrid={handleDeleteGrid}
              handleDropdownToggle={handleDropdownToggle}
              isDropdownOpen={isDropdownOpen}
              dropdown={dropdown}
              scrollLeft={scrollLeft}
              sliderRef={sliderRef}
            />
          </div>
       </div>
        </div>

        <div
          onClick={handleAddGrid}
          className="relative cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
        >
          +
        </div>
      </div>




        <div className="flex w-[50px] h-[30px] justify-end pr-2">{day}</div>
      <div class="flex-auto bg-blue-100 border border-l-gray-400 border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white border-r-gray-400"></div>                  

       <div className="h-8 relative bg-indigo-200">
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: "27%" }}
        ></div>
      </div>




      import React from "react";

function HoursSlot({
  hour,
  end_hours,
  end_minutes,
  trackEndHour,
  start_minutes,
  start_hours,
  trackStartHour,
}) {
  return (
    <div>
      {hour === end_hours ? (
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: `${(end_minutes * 100) / 60}%` }}
        ></div>
      ) : (
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: `${trackEndHour[hour] ? 100 : 0}%` }}
        ></div>
      )}
      {hour === start_hours ? (
        <div
          className="absolute inset-0 bg-blue-100"
          style={{ width: `${(start_minutes * 100) / 60}%` }}
        ></div>
      ) : (
        <div
          className="absolute inset-0 bg-blue-100"
          style={{ width: `${trackStartHour[hour] ? 100 : 0}%` }}
        ></div>
      )}
    </div>
  );
}

export default HoursSlot;




       {selectedAll ? (
            <div
              onClick={selectAll}
              className="px-4 py-2 rounded flex-1 ml-3 text-center bg-purple-500 text-white transition-all ease-in cursor-pointer duration-400"
            >
              All
            </div>
          ) : (
            <div
              onClick={selectAll}
              className="px-4 py-2 border-purple-200 border text-purple-500 rounded flex-1 ml-3 text-center transition-all ease-in cursor-pointer duration-400"
            >
              All
            </div>
          )}

            // const selectAll = () => {
  //   const value = !selectedAll;
  //   setSelectedAll(value);
  //   setSingleSelected(() => {
  //     const newState = { ...singleSelected };
  //     for (let i = 0; i < selectedButton; i++) {
  //       newState[i] = value;
  //     }
  //     return newState;
  //   });
  // };



  import React, { useEffect, useState } from "react";
import DaySlot from "./DaySlot";
import FoodAvailability from "../../json/food_availability.json";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import "../../lib/css/allspark.min.css";

function TimeSlot() {
  const foodAvailability = FoodAvailability;
  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const color = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const [foodSlot, setFoodSlot] = useState({});

  foodAvailability.food_availability.forEach((obj) => {
    for (const [key, value] of Object.entries(obj)) {
      if (!foodSlot[key]) {
        foodSlot[key] = {};
      }
      foodSlot[key][foodAvailability.food_availability.indexOf(obj)] =
        value.slots[0];
    }
  });

  const foodSlotArray = Object.values(foodSlot);

  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const slot = foodSlotArray[selectedIndex];
  const timeSlot = Object.values(slot);
  const [slots, setSlots] = useState(timeSlot);
  const [dayFoodSlot, setDayFoodSlot] = useState(foodSlot[selectedIndex]);


  const sortedColor = Object.values(dayFoodSlot)
    .map((value, index) => {
      const start_time = value.start_time;
      return { start_time, index };
    })
    .sort((a, b) => b.start_time - a.start_time)
    .map(({ index }) => color[index]);

  const daySlots = Object.values(dayFoodSlot).sort((a, b) => {
    return b.start_time - a.start_time;
  });


  useEffect(() => {
    setSlots(timeSlot);
   
  }, [selectedIndex]);

  useEffect(()=>{
    setDayFoodSlot(slots)
  }, [slots])


  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = {...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index) => {
    const tempSlot = [...timeSlot];
    tempSlot.splice(index, 1);
    setSlots(tempSlot);

  };

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return  (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              color={color}
              dayFoodSlot={dayFoodSlot}
              sortedColor={sortedColor}
              daySlots={daySlots}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div className="flex-col mt-6 ml-[45px]">
        {slots.map((s, index) => {
          return (
            <div className="w-full flex justify-between" key={index}>
              <div className="px-4 py-2 rounded flex-1 ">
                <SCTimepicker label="Start Time" value={s.start_time} />
              </div>
              <div className="px-4 py-2 rounded flex-1">
                <SCTimepicker label="End Time" value={s.end_time} />
              </div>
              <div
                onClick={(e) => removeSlot(index)}
                className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
              >
                <div>Remove Hour</div>
              </div>
              <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                <div>Custom Hours</div>
              </div>
            </div>
          );
        })}
      </div>
      <div>
        <SCButton
          size="lg"
          variant="primary-outline"
          className="ml-[60px] mt-4"
        >
          <span className="ml-2">Add New Hour</span>
        </SCButton>
      </div>
    </div>
  );
}

export default TimeSlot;


import React, { useState } from "react";
import HourSlots from "./Slots";

function TimeDivision({ day, dayFoodSlot, sortedColor,daySlots}) {

  console.log(daySlots)
  const divs = Array.from({ length: 24 }, (_, hour) => (
    <div
      key={hour}
      className="w-1/6 h-10 bg-blue-100 border border-white relative "
    >
      {daySlots.map((slot, index) => {
        return (
          <HourSlots
            key={index}
            hour={hour}
            start_time={slot.start_time}
            end_time={slot.end_time}
            color={sortedColor[index]}
          />
        );
      })}
    </div>
  ));
  return (
    <div className="flex">
      <div className="flex w-[250px] h-[30px] justify-end pr-2 text-xl">
        {day}
      </div>
      {divs}
    </div>
  );
}

export default TimeDivision;

    // console.log(slots)

    // console.log(i);

    // const tempFoodSlot = [...foodSlotArray]

    // const temp = tempFoodSlot.forEach((food, index) => {
    //   if (index === selectedIndex) {
    //     const f = Object.values(food);
    //     f.splice(i, 1);
    //     setSlots(f);
    //   }
    // });

    // console.log(temp)

    // setFoodSlot({})

    // console.log("hi");

    // console.log(tempFoodSlot)

    // console.log(foodSlotArray)
    // const newFoodSlot = { ...foodSlot };
    // console.log(slots);
    // newFoodSlot[selectedIndex] = { ...slots };
    // console.log("newFoodSlot", newFoodSlot);



      modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
  
    Object.entries(available_times).forEach(times=>{
      for(const [key, value] of Object.entries(times)){
        if(!tempFoodSlot2[key]){
          tempFoodSlot2[key] = {}
        }
      }
    }) 
    
  });
  
  console.log("tempFoodSlot2", tempFoodSlot2)

  foodAvailability.forEach((obj) => {
    for (const [key, value] of Object.entries(obj)) {
      if (!tempFoodSlot[key]) {
        tempFoodSlot[key] = {};
      }
      tempFoodSlot[key][foodAvailability.indexOf(obj)] = value.slots[0];
    }
  });
  const result = {};

  for (let i = 0; i < modified.length; i++) {
    const section = modified[i];
    const available_times = section.available_times;
  
    for (let j = 0; j < 7; j++) {
      const day = available_times[j];
  
      if (!result[j]) {
        result[j] = [];
      }
  
      result[j].push(day);
    }
  }


      {
      "id": 2944,
      "title": "Wingstreet",
      "start_time": 901,
      "end_time": 2159,
      "available_times": {
        "0": {
          "disabled": false,
          "slots": [
            {
              "start_time": 2000,
              "end_time": 2300
            }
          ]
        },
        "1": {
          "disabled": false,
          "slots": [
            {
              "start_time": 700,
              "end_time": 830
            }
          ]
        },
        "2": {
          "disabled": false,
          "slots": [
            {
              "start_time":900,
              "end_time": 1100
            }
          ]
        },
        "3": {
          "disabled": false,
          "slots": [
            {
              "start_time": 30,
              "end_time":  130
            }
          ]
        },
        "4": {
          "disabled": false,
          "slots": [
            {
              "start_time": 400,
              "end_time": 800
            }
          ]
        },
        "5": {
          "disabled": false,
          "slots": [
            {
              "start_time": 400,
              "end_time": 800
            }
          ]
        },
        "6": {
          "disabled": false,
          "slots": [
            {
              "start_time": 745,
              "end_time": 859
            }
          ]
        }
      },
      "days": "0,1,2,3,4,5,6",
      "is_available": true,
      "enabled": true,
      "hidden": false,
      "statuses": [
        {
          "provider_id": 1,
          "hidden": false
        }
      ],
      "sequence": 1,
      "title_v2": {
        "en": "Wingstreet"
      },
      "sub-sections": [
        {
          "id": 64543,
          "title": "Wings",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 1,
          "title_v2": {
            "en": "Wings"
          },
          "items": [
            {
              "id": 86797,
              "title": "Wingstreet - Honey BBQ",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist.",
              "image": "/images/0d3fd6e19b359493eb61da21727ed70501380c28.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Honey BBQ"
              },
              "description_v2": {
                "en": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist."
              }
            },
            {
              "id": 86798,
              "title": "Wingstreet - Garlic Parmesan",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors",
              "image": "/images/eeca8dccf21e8afb9ff558248b9e415ae3ab4e8d.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Garlic Parmesan"
              },
              "description_v2": {
                "en": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors"
              }
            },
            {
              "id": 86799,
              "title": "Wingstreet - Asian Sesame",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish.",
              "image": "/images/dbad6b4c70de8036f133abb71e96c3103d7918ea.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Asian Sesame"
              },
              "description_v2": {
                "en": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish."
              }
            },
            {
              "id": 86800,
              "title": "Wingstreet - Maple Honey Sriracha",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha.",
              "image": "/images/15367c6cf3dc0e5df418e1b38621f5b2dfc183c1.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 4,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Maple Honey Sriracha"
              },
              "description_v2": {
                "en": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha."
              }
            }
          ]
        },
        {
          "id": 64544,
          "title": "Dips.",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 2,
          "title_v2": {
            "en": "Dips."
          },
          "items": [
            {
              "id": 86801,
              "title": "Mayo Mustard Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Mayo Mustard Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86802,
              "title": "Garlic Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Garlic Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86803,
              "title": "Ranch Sauce",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Ranch Sauce"
              },
              "description_v2": {
                "en": ""
              }
            }
          ]
        }
      ]
    },
    {
      "id": 2945,
      "title": "Wingstreet",
      "start_time": 901,
      "end_time": 2159,
      "available_times":{
        "0": {
          "disabled": false,
          "slots": [
            {
              "start_time":30,
              "end_time": 130
            }
          ]
        },
        "1": {
          "disabled": false,
          "slots": [
            {
              "start_time": 2100,
              "end_time": 2330
            }
          ]
        },
        "2": {
          "disabled": false,
          "slots": [
            {
              "start_time": 500,
              "end_time": 630
            }
          ]
        },
        "3": {
          "disabled": false,
          "slots": [
            {
              "start_time": 2000,
              "end_time": 2300
            }
          ]
        },
        "4": {
          "disabled": false,
          "slots": [
            {
              "start_time": 100,
              "end_time": 400
            }
          ]
        },
        "5": {
          "disabled": false,
          "slots": [
            {
              "start_time": 1200,
              "end_time": 1500
            }
          ]
        },
        "6": {
          "disabled": false,
          "slots": [
            {
              "start_time": 1700,
              "end_time": 2100
            }
          ]
        }
      },
      "days": "0,1,2,3,4,5,6",
      "is_available": true,
      "enabled": true,
      "hidden": false,
      "statuses": [
        {
          "provider_id": 1,
          "hidden": false
        }
      ],
      "sequence": 1,
      "title_v2": {
        "en": "Wingstreet"
      },
      "sub-sections": [
        {
          "id": 64543,
          "title": "Wings",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 1,
          "title_v2": {
            "en": "Wings"
          },
          "items": [
            {
              "id": 86797,
              "title": "Wingstreet - Honey BBQ",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist.",
              "image": "/images/0d3fd6e19b359493eb61da21727ed70501380c28.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Honey BBQ"
              },
              "description_v2": {
                "en": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist."
              }
            },
            {
              "id": 86798,
              "title": "Wingstreet - Garlic Parmesan",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors",
              "image": "/images/eeca8dccf21e8afb9ff558248b9e415ae3ab4e8d.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Garlic Parmesan"
              },
              "description_v2": {
                "en": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors"
              }
            },
            {
              "id": 86799,
              "title": "Wingstreet - Asian Sesame",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish.",
              "image": "/images/dbad6b4c70de8036f133abb71e96c3103d7918ea.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Asian Sesame"
              },
              "description_v2": {
                "en": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish."
              }
            },
            {
              "id": 86800,
              "title": "Wingstreet - Maple Honey Sriracha",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha.",
              "image": "/images/15367c6cf3dc0e5df418e1b38621f5b2dfc183c1.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 4,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Maple Honey Sriracha"
              },
              "description_v2": {
                "en": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha."
              }
            }
          ]
        },
        {
          "id": 64544,
          "title": "Dips.",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 2,
          "title_v2": {
            "en": "Dips."
          },
          "items": [
            {
              "id": 86801,
              "title": "Mayo Mustard Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Mayo Mustard Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86802,
              "title": "Garlic Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Garlic Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86803,
              "title": "Ranch Sauce",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Ranch Sauce"
              },
              "description_v2": {
                "en": ""
              }
            }
          ]
        }
      ]
    }





    

  // console.log(slots)
  // const sortedColor = Object.values(dayFoodSlot)
  //   .map((value, index) => {
  //     const start_time = value.start_time;
  //     return { start_time, index };
  //   })
  //   .sort((a, b) => b.start_time - a.start_time)
  //   .map(({ index }) => colors[index]);

  // useEffect(() => {
  //   if (tempColor.length < 7) {
  //     tempColor.push([...sortedColor]);
  //   }
  // }, []);

  // useEffect(() => {
  //   setFoodColor(tempColor[timeSlotIndex]);
  // }, [tempColor.length]);

  // const [foodColor, setFoodColor] = useState([]);



import React, { useState } from 'react';

function App() {
  const [data, setData] = useState({
    "0": {
      "start_time": 1600,
      "end_time": 1730,
      "color": "#79c5f5",
      "id": 2943
    },
    "1": {
      "start_time": 1600,
      "end_time": 1730,
      "color": "#79c5f5",
      "id": 2944
    },
    "2": {
      "start_time": 1600,
      "end_time": 1730,
      "color": "#79c5f5",
      "id": 2945
    }
  });

  const [selectedData, setSelectedData] = useState(null);

  const handleClick = (id) => {
    setSelectedData(data[id]);
  }

  return (
    <div>
      <button onClick={() => handleClick("0")}>Blue</button>
      <button onClick={() => handleClick("1")}>Green</button>
      <button onClick={() => handleClick("2")}>Yellow</button>
      {selectedData &&
        <div>
          <p>Start Time: {selectedData.start_time}</p>
          <p>End Time: {selectedData.end_time}</p>
          <p>Color: {selectedData.color}</p>
          <p>ID: {selectedData.id}</p>
        </div>
      }
    </div>
  );
}

export default App;


import React, { useEffect, useState } from "react";
import { SCTimepicker, SCButton } from "../../lib/index.cjs";

function ProductSlot({
  slots,
  removeSlot,
  singleSelected,
  handleColor,
  setButtonSelected,
  buttonSelected,
}) {
  const buttonTitles = ["blue", "green", "yellow"];
  const [addNewHour, setAddNewHour] = useState([])

  useEffect(() => {
    setButtonSelected([false, false, false]);
  }, [singleSelected]);

  const handleNewSlot = () => {
    console.log(addNewHour);
  };

  console.log(slots)

  return (
    <div>
      <div className="mt-4">
        {buttonTitles.map((title, index) => (
          <SCButton
            key={index}
            variant="primary-outline"
            size="sm"
            action={(e) => handleColor(index)}
          >
            {title}
          </SCButton>
        ))}
      </div>
      <div className="flex-col mt-6 ml-[45px]">
        {slots.map((slot, index) => {
 
          return slot.map((s, index2) => {
            return buttonSelected[index] ? (
              <div className="flex-col">
                <div className="w-full flex justify-between" key={index2}>
                  <div className="px-4 py-2 rounded flex-1 ">
                    <SCTimepicker label="Start Time" value={s.start_time} />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker label="End Time" value={s.end_time} />
                  </div>
                  <div
                    onClick={(e) => removeSlot(index, index2)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ) : null;
          });
        })}
        <SCButton
          size="lg"
          variant="primary-outline"
          className="ml-[20px] mt-4"
          action={handleNewSlot}
        >
          <span className="ml-2">Add New Hour</span>
        </SCButton>
      </div>
    </div>
  );
}

export default ProductSlot;


function handleColor(e, id) {
  const container = document.getElementById('container');
  
  const div = document.createElement('div');
  div.textContent = JSON.stringify(matched);
  container.appendChild(div);
}

function MyButtons() {
  return (
    <div>
      <SCButton
        key={2943}
        variant="primary"
        size="sm"
        action={(e) => handleColor(e, 2943)}
      >
        2943
      </SCButton>
      <SCButton
        key={2945}
        variant="primary"
        size="sm"
        action={(e) => handleColor(e, 2945)}
      >
        2945
      </SCButton>
      <SCButton
        key={2944}
        variant="primary"
        size="sm"
        action={(e) => handleColor(e, 2944)}
      >
        2944
      </SCButton>
      <div id="container"></div>
    </div>
  );
}


const arr = [
  {id: 1, name: 'John'},
  {id: 2, name: 'Jane'},
  {id: 3, name: 'Bob'}
];

const obj = arr.reduce((acc, cur) => {
  acc[cur.id] = cur;
  return acc;
}, {});

console.log(obj);


    <div className="flex-col" key={index}>
              <div className="w-full flex justify-between">
                <div className="px-4 py-2 rounded flex-1">
                  <SCTimepicker
                    label="Start Time"
                    value={s.start_time}
                    handleChange={(value) => {
                      handleStartValue(value, index);
                    }}
                  />
                </div>
                <div className="px-4 py-2 rounded flex-1">
                  <SCTimepicker
                    label="End Time"
                    value={s.end_time}
                    handleChange={(value) => {
                      handleEndValue(value, index);
                    }}
                  />
                </div>
                <div
                  onClick={(e) => removeSlot(selectedSection, index)}
                  className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                >
                  <div>Remove Hour</div>
                </div>
                <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                  <div>Custom Hours</div>
                </div>
              </div>
            </div>



            import React, { useEffect, useState } from "react";
import ModifiedFoodAvailability from "../../json/modified_food_availability.json";
import "../../lib/css/allspark.min.css";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import DaySlot from "./DaySlot";
import Empty from "../../json/empty.json";

function TimeSlot() {
  const colors = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const modified = ModifiedFoodAvailability.sections;
  const id = [];

  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const tempFoodSlot2 = {};

  modified.forEach((m, index) => {
    const temp = Object.values(m.available_times);
    id.push(m.id);
    temp.forEach((t) => {
      t.slots.forEach((s) => {
        s.color = colors[index];
        s.id = m.id;
      });
    });
  });

  modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
    for (const [key, value] of Object.entries(available_times)) {
      if (!tempFoodSlot2[key]) {
        tempFoodSlot2[key] = [];
      }
      tempFoodSlot2[key].push(value.slots);
    }
  });

  const [foodSlot, setFoodSlot] = useState(tempFoodSlot2);
  const foodSlotArray = Object.values(foodSlot);
  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const timeSlot = Object.values(foodSlotArray[selectedIndex]);
  const [slots, setSlots] = useState(timeSlot);
  const sectionButton = [...new Array(3)].map((_, idx) => idx === false);
  const [buttonSelected, setButtonSelected] = useState(sectionButton);

  useEffect(() => {
    setSlots(timeSlot);
  }, [selectedIndex]);

  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index, index2) => {
    const tempSlot = [...timeSlot];
    tempSlot[index]?.splice(index2, 1);
    setSlots(tempSlot);
  };

  useEffect(() => {
    let newFoodSlot = { ...foodSlot };
    newFoodSlot[selectedIndex] = { ...slots };
    setFoodSlot(newFoodSlot);
  }, [slots]);

  const [selectedSection, setSelectedSection] = useState(0);
  const [start, setStart] = useState(0);
  const [end, setEnd] = useState(0);
  const [slot, setSlot] = useState([]);
  const [pid, setPid] = useState(null);

  const handleColor = (e, index) => {
    setPid(e.target.textContent);
    setSlot(slots[index]);
    setSelectedSection(index);
    setButtonSelected(() => {
      const newState = [...buttonSelected];
      if (newState[index] === true) {
        newState[index] = true;
      } else {
        newState[index] = !buttonSelected[index];
      }

      if (newState[index]) {
        for (let i = 0; i < buttonSelected.length; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const handleStartValue = (value, index) => {
    setStart(value);
    const tempSlot = [...slot];
    tempSlot[index].start_time = value;
    setSlot(tempSlot);
    setStart(0);
  };
  const handleEndValue = (value, index) => {
    setEnd(value);
    const tempSlot = [...slot];
    tempSlot[index].end_time = value;
    setSlot(tempSlot);
    setEnd(0);
  };

  const addNewHour = (index) => {
 
    const temp = {};
    temp.start_time = start;
    temp.end_time = end;
    const newData = [...slots];
    newData[index].push(temp);
    setSlot(newData[index]);
    setSlots(newData);
  };

  const allFalse = buttonSelected.every((value) => value === false);

  const idKey = slots.reduce((acc, cur) => {
    cur.forEach((item) => {
      if (acc[item.id]) {
        acc[item.id].push(item);
      } else {
        acc[item.id] = [item];
      }
    });
    return acc;
  }, {});

  console.log(idKey);

  useEffect(() => {
    setButtonSelected(sectionButton);
    setSlot([]);
  }, [selectedIndex]);

  console.log(buttonSelected)

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              daySlot={slots}
              selectedIndex={selectedIndex}
              timeSlotIndex={index}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div>
        <div className="mt-4">
          {buttonSelected.map((_, index) => {
            return buttonSelected[index] ? (
              <SCButton
                key={index}
                variant="primary"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                variant="primary-outline"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            );
          })}
        </div>
        {pid && !allFalse && (
          <div>
            {idKey[pid]?.map((s, index) => (
              <div className="flex-col" key={index}>
                <div className="w-full flex justify-between">
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="Start Time"
                      value={s.start_time}
                      handleChange={(value) => {
                        handleStartValue(value, index);
                      }}
                    />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="End Time"
                      value={s.end_time}
                      handleChange={(value) => {
                        handleEndValue(value, index);
                      }}
                    />
                  </div>
                  <div
                    onClick={(e) => removeSlot(selectedSection, index)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {allFalse ? null : (
          <SCButton
            size="lg"
            variant="primary-outline"
            className="ml-[20px] mt-4"
            action={() => addNewHour(selectedSection)}
          >
            <span className="ml-2">Add New Hour</span>
          </SCButton>
        )}
      </div>
    </div>
  );
}

export default TimeSlot;




import React, { useEffect, useState } from "react";
import ModifiedFoodAvailability from "../../json/modified_food_availability.json";
import "../../lib/css/allspark.min.css";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import DaySlot from "./DaySlot";
import Empty from "../../json/empty.json";

function TimeSlot() {
  const colors = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const modified = Empty.sections;
  const id = [];

  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const tempFoodSlot2 = {};

  modified.forEach((m, index) => {
    const temp = Object.values(m.available_times);
    id.push(m.id);
    temp.forEach((t) => {
      t.slots.forEach((s) => {
        s.color = colors[index];
        s.id = m.id;
      });
    });
  });


  modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
    for (const [key, value] of Object.entries(available_times)) {
      if (!tempFoodSlot2[key]) {
        tempFoodSlot2[key] = [];
      }
      tempFoodSlot2[key].push(value.slots);
    }
  });

  console.log(tempFoodSlot2)
  const [foodSlot, setFoodSlot] = useState(tempFoodSlot2);
  const foodSlotArray = Object.values(foodSlot);
  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const timeSlot = Object.values(foodSlotArray[selectedIndex]);
  const [slots, setSlots] = useState(timeSlot);
  const sectionButton = [...new Array(3)].map((_, idx) => idx === false);
  const [buttonSelected, setButtonSelected] = useState(sectionButton);

  useEffect(() => {
    setSlots(timeSlot);
  }, [selectedIndex]);

  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index, index2) => {
    const tempSlot = [...timeSlot];
    tempSlot[index]?.splice(index2, 1);
    setSlots(tempSlot);
  };

  useEffect(() => {
    let newFoodSlot = { ...foodSlot };
    newFoodSlot[selectedIndex] = { ...slots };
    setFoodSlot(newFoodSlot);
  }, [slots]);

  const [selectedSection, setSelectedSection] = useState(0);
  const [start, setStart] = useState(0);
  const [end, setEnd] = useState(0);
  const [slot, setSlot] = useState([]);
  const [pid, setPid] = useState(null);

  function groupById(slots) {
    const idKey = slots.reduce((acc, cur) => {
      cur.forEach((item) => {
        if (acc[item.id]) {
          acc[item.id].push(item);
        } else {
          acc[item.id] = [item];
        }
      });
      return acc;
    }, {});
    return idKey;
  }

  const idKey = groupById(slots);

  const handleColor = (e, index) => {
    setPid(e.target.textContent);
    setSlot(slots[index]);
    setSelectedSection(index);
    setButtonSelected(() => {
      const newState = [...buttonSelected];
      if (newState[index] === true) {
        newState[index] = true;
      } else {
        newState[index] = !buttonSelected[index];
      }

      if (newState[index]) {
        for (let i = 0; i < buttonSelected.length; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const handleStartValue = (value, index) => {
    setStart(value);
    const tempSlot = [...slot];
    tempSlot[index].start_time = value;
    setSlot(tempSlot);
    setStart(0);
  };
  const handleEndValue = (value, index) => {
    setEnd(value);
    const tempSlot = [...slot];
    tempSlot[index].end_time = value;
    setSlot(tempSlot);
    setEnd(0);
  };

  function createArrayWithKey(obj, key) {
    if (!(key in obj)) {
      obj[key] = [];
      obj[key].push({ id: key });
    }
    return obj;
  }

  const addNewHour = (index) => {
    const temp = {};
    temp.start_time = start;
    temp.end_time = end;
    let tempObj = groupById(slots);
    const tempObj2 = createArrayWithKey(tempObj, pid);
    const a = Object.values(tempObj2);
    const newData = [...a];
    newData[index].push(temp);
    setSlot(newData[index]);
    setSlots(newData);
  };

  const allFalse = buttonSelected.every((value) => value === false);

  useEffect(() => {
    setButtonSelected(sectionButton);
    setSlot([]);
  }, [selectedIndex]);

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              daySlot={slots}
              selectedIndex={selectedIndex}
              timeSlotIndex={index}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div>
        <div className="mt-4">
          {buttonSelected.map((_, index) => {
            return buttonSelected[index] ? (
              <SCButton
                key={index}
                variant="primary"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                variant="primary-outline"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            );
          })}
        </div>
        {pid && !allFalse && (
          <div>
            {idKey[pid]?.map((s, index) => (
              <div className="flex-col" key={index}>
                <div className="w-full flex justify-between">
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="Start Time"
                      value={s.start_time}
                      handleChange={(value) => {
                        handleStartValue(value, index);
                      }}
                    />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="End Time"
                      value={s.end_time}
                      handleChange={(value) => {
                        handleEndValue(value, index);
                      }}
                    />
                  </div>
                  <div
                    onClick={(e) => removeSlot(selectedSection, index)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {allFalse ? null : (
          <SCButton
            size="lg"
            variant="primary-outline"
            className="ml-[20px] mt-4"
            action={() => addNewHour(selectedSection)}
          >
            <span className="ml-2">Add New Hour</span>
          </SCButton>
        )}
      </div>
    </div>
  );
}

export default TimeSlot;


===================================================================
import React, { useEffect, useState } from "react";
import ModifiedFoodAvailability from "../../json/modified_food_availability.json";
import "../../lib/css/allspark.min.css";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import DaySlot from "./DaySlot";
import Empty from "../../json/empty.json";

function TimeSlot() {
  const colors = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const modified = Empty.sections;
  const id = [];

  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const tempFoodSlot2 = {};



  modified.forEach((m, index) => {
    const temp = Object.values(m.available_times);
    id.push(m.id);
    temp.forEach((t) => {
      t.slots.forEach((s) => {
        s.color = colors[index];
        s.id = m.id;
      });
    });
  });

  id.sort()
  
  modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
    for (const [key, value] of Object.entries(available_times)) {
      if (!tempFoodSlot2[key]) {
        tempFoodSlot2[key] = [];
      }
      tempFoodSlot2[key].push(value.slots);
    }
  });

  const [foodSlot, setFoodSlot] = useState(tempFoodSlot2);
  const foodSlotArray = Object.values(foodSlot);
  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const timeSlot = Object.values(foodSlotArray[selectedIndex]);
  const [slots, setSlots] = useState(timeSlot);
  const sectionButton = [...new Array(3)].map((_, idx) => idx === false);
  const [buttonSelected, setButtonSelected] = useState(sectionButton);

  useEffect(() => {
    setSlots(timeSlot);
  }, [selectedIndex]);

  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  console.log(tempFoodSlot2)
  const removeSlot = (index, index2) => {
    const tempSlot = [...timeSlot];
    tempSlot[index]?.splice(index2, 1);
    setSlots(tempSlot);
  };

  useEffect(() => {
    let newFoodSlot = { ...foodSlot };
    newFoodSlot[selectedIndex] = { ...slots };
    setFoodSlot(newFoodSlot);
  }, [slots]);

  const [selectedSection, setSelectedSection] = useState(0);
  const [start, setStart] = useState(0);
  const [end, setEnd] = useState(0);
  const [slot, setSlot] = useState([]);
  const [pid, setPid] = useState(null);

  function groupById(slots) {
    const idKey = slots.reduce((acc, cur) => {
      cur.forEach((item) => {
        if (acc[item.id]) {
          acc[item.id].push(item);
        } else {
          acc[item.id] = [item];
        }
      });
      return acc;
    }, {});
    return idKey;
  }

  const idKey = groupById(slots);



  const handleColor = (e, index) => {
    setPid(e.target.textContent);
    setSlot(slots[index]);
    setSelectedSection(index);
    setButtonSelected(() => {
      const newState = [...buttonSelected];
      if (newState[index] === true) {
        newState[index] = true;
      } else {
        newState[index] = !buttonSelected[index];
      }

      if (newState[index]) {
        for (let i = 0; i < buttonSelected.length; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const handleStartValue = (value, index) => {
    setStart(value);
    const tempSlot = [...slot];
    tempSlot[index].start_time = value;
    setSlot(tempSlot);
    setStart(0);
  };
  const handleEndValue = (value, index) => {
    setEnd(value);
    const tempSlot = [...slot];
    tempSlot[index].end_time = value;
    setSlot(tempSlot);
    setEnd(0);
  };

  function createArrayWithKey(obj, key) {
    const temp = {};
    temp.start_time = start;
    temp.end_time = end;
    temp.id=key
    if (!(key in obj)) {
      obj[key] = [];
      obj[key].push(temp);
    }
    return obj;
  }

  function keyExists(obj, key) {
    return(key in obj);
  }
  
  const addNewHour = (index) => {
    const temp = {};
    temp.start_time = start;
    temp.end_time = end;
    temp.id = parseInt(pid)
    //grouping by ID
    let tempObj = groupById(slots);
    const exists = keyExists(tempObj,pid)
    //if doesn't exist create new corresponding object
    if(!exists){
       tempObj = createArrayWithKey(tempObj, pid);
    }else{
      tempObj[pid].push(temp);
    }
    console.log(tempObj)


    // if (tempObj2[pid]) {
    //   tempObj2[pid].push(temp);
    // } else {
    //   tempObj2[pid] = [pid];
    // }
    
    const a = Object.values(tempObj);
    const newData = [...a]
    console.log(newData)
    // newData[index].push(temp);
    setSlot(newData[index]);
    setSlots(newData);
  };

  const allFalse = buttonSelected.every((value) => value === false);

  useEffect(() => {
    setButtonSelected(sectionButton);
    setSlot([]);
  }, [selectedIndex]);

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              daySlot={slots}
              selectedIndex={selectedIndex}
              timeSlotIndex={index}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div>
        <div className="mt-4">
          {buttonSelected.map((_, index) => {
            return buttonSelected[index] ? (
              <SCButton
                key={index}
                variant="primary"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                variant="primary-outline"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            );
          })}
        </div>
        {pid && !allFalse && (
          <div>
            {idKey[pid]?.map((s, index) => (
              <div className="flex-col" key={index}>
                <div className="w-full flex justify-between">
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="Start Time"
                      value={s.start_time}
                      handleChange={(value) => {
                        handleStartValue(value, index);
                      }}
                    />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="End Time"
                      value={s.end_time}
                      handleChange={(value) => {
                        handleEndValue(value, index);
                      }}
                    />
                  </div>
                  <div
                    onClick={(e) => removeSlot(selectedSection, index)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {allFalse ? null : (
          <SCButton
            size="lg"
            variant="primary-outline"
            className="ml-[20px] mt-4"
            action={() => addNewHour(selectedSection)}
          >
            <span className="ml-2">Add New Hour</span>
          </SCButton>
        )}
      </div>
    </div>
  );
}

export default TimeSlot;



const tooltipPositionClass = `absolute ${
    position === "top"
      ? "bottom-0 mb-6 flex"
      : position === "bottom"
      ? "top-0 mt-6 flex-reverse"
      : ""
  } bottom-0 flex-col items-center mb-6 hidden group-hover:flex`;




     {/* right */}
      {/* <div className="flex items-center justify-center w-screen h-screen">
        <div className="relative flex items-center group">
          <div ref={childrenRef}>{children}</div>
          <div className="absolute left-0 flex items-center ml-14 group-hover:flex">
            <div className="w-3 h-3 -mr-2 rotate-45 bg-black"></div>
            <span className="relative z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
              {message}
            </span>
          </div>
        </div>
      </div> */}
{/* 
      <div class="flex items-center justify-center w-screen h-screen">
        <div class="relative flex items-center group">
          <svg
            class="w-5 h-5"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z"
              clip-rule="evenodd"
            />
          </svg>
          <div class="absolute left-0 flex items-center hidden ml-6 group-hover:flex">
            <div class="w-3 h-3 -mr-2 rotate-45 bg-black"></div>
            <span class="relative z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
              A right aligned tooltip.
            </span>
          </div>
        </div>
      </div> */}

      {/* left */}
      {/* <div class="flex items-center justify-center w-screen h-screen">
        <div class="relative flex items-center group">
          <div class="absolute right-0 flex items-center mr-10 group-hover:flex">
           
            <span className="relative z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
            hello
            </span>
            <div class="w-2 h-2 -ml-[4.5px] rotate-45 bg-black"></div>
          </div>
       {children}
        </div>
      </div> */}



        {/* top */}
      {/* <div className="flex items-center justify-center w-screen h-screen">
        <div className="relative flex flex-col items-center group">
          <div ref={childrenRef}>{children}</div>
          <div className={tooltipPositionClass}>
            <span className="relative z-10 p-2 text-lg text-white bg-black shadow-lg">
             hello lorem ipsum
            </span>
            <div className={tooltipArrowPositionClass}></div>
          </div>
        </div>
      </div> */}

      {/* <div className="flex items-center justify-center w-screen h-screen">
        <div className="relative flex flex-col items-center group">
          <div ref={childrenRef}>{children}</div>
          <div className="absolute bottom-0 flex-col items-center hidden mb-6 group-hover:flex">
            <span className="relative z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
              {message}
            </span>
            <div className="w-3 h-3 -mt-2 rotate-45 bg-black"></div>
          </div>
        </div>
      </div> */}











        {/* left */}
      {/* <div className="flex items-center justify-center w-screen h-screen">
        <div className="relative flex items-center group">
          <div className="absolute right-0 flex items-center mr-10 group-hover:flex">
            <span className="relative flex-1 z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
              {message}
            </span>
            <div className="w-3 h-3 -ml-[7.3px] bg-black rotate-45"></div>
          </div>
          {children}
        </div>
      </div> */}

      {/* <body class="flex items-center justify-center w-screen h-screen">
        <div class="relative flex items-center group">
          <div ref={childrenRef}>{children}</div>
          <div class="absolute left-0 flex items-center ml-6 group-hover:flex">
            <div class="w-3 h-3 -mr-2 rotate-45 bg-black"></div>
            <span class="relative flex-1 z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
              {message}
            </span>
          </div>
        </div>
      </body> */}

      {/* <div className="flex items-center justify-center w-screen h-screen">
        <div className="relative flex flex-col items-center group">
          <div ref={childrenRef}>{children}</div>
          <div className="absolute bottom-0 flex-col items-center hidden mb-6 group-hover:flex">
            <span className="relative z-10 p-2 text-xs leading-none text-white whitespace-no-wrap bg-black shadow-lg">
              {message}
            </span>
            <div className="w-3 h-3 -mt-2 rotate-45 bg-black"></div>
          </div>
        </div>
      </div> */}

      {/* left */}





      import React, { useState } from "react";

const Tooltip = ({ trigger, children }) => {
  const [isVisible, setIsVisible] = useState(false);

  const handleToggle = () => {
    if (trigger === "hover") {
      setIsVisible(!isVisible);
    } else if (trigger === "click") {
      setIsVisible(true);
    }
  };

  return (
    <div className="relative inline-block">
      <span
        className="cursor-pointer"
        onMouseEnter={() => handleToggle()}
        onMouseLeave={() => handleToggle()}
        onClick={() => handleToggle()}
      >
        {children}
      </span>
      {isVisible && (
        <div className="absolute z-10 bg-blue-700 text-white py-2 px-3 rounded shadow-lg">
          This is the tooltip content.
        </div>
      )}
    </div>
  );
};

export default Tooltip;




  const tooltipOuterClass = `relative flex ${
    position === "left"
      ? ""
      : position === "right"
      ? ""
      : position === "top" ||
        position === "top-right" ||
        position === "top-left"
      ? "flex-col"
      : position === "bottom" ||
        position === "bottom-right" ||
        position === "bottom-left"
      ? "flex-col"
      : ""
  } items-center`;


  
  const tooltipBoxClass = `relative ${
    position === "left" || position === "right"
      ? "flex-1"
      : position === "top-right" || position === "bottom-right"
      ? "right-[30px]"
      : position === "top-left" || position === "bottom-left"
      ? "left-[30px]"
      : ""
  } z-10 px-3 py-2 font-medium ${
    variant === "primary"
      ? "bg-[#6A13F4] text-[#FFFFFF]"
      : variant === "secondary"
      ? "bg-[#F0E7FE] text-[#6A13F4]"
      : variant === "tertiary"
      ? "bg-[#EBEBEB] text-[#000000]"
      : variant === "success"
      ? "bg-[#16B050] text-[#FFFFFF]"
      : variant === "danger"
      ? "bg-[#F43F5E] text-[#FFFFFF]"
      : variant === "warning"
      ? "bg-[#F3C318] text-[#FFFFFF]"
      : variant === "clear"
      ?"bg-white text-black"
      :""
  } w-[109px] shadow-lg rounded-[8px]`;



import React, { useRef, useEffect, useState } from "react";
import PropTypes from "prop-types";
import "./tooltip.css";
function Tooltip({
  content,
  position,
  caret,
  trigger,
  timeout,
  variant,
  ...props
}) {
  useEffect(() => {
    if (childrenRef.current) {
      const width = childrenRef.current.offsetWidth;
      const height = childrenRef.current.offsetHeight;
      setChildrenHeight(height);
      setChildrenWidth(width);
    }
  }, []);

  const childrenRef = useRef(null);
  const [isTooltipOpen, setIsTooltipOpen] = useState(false);
  const [childrenWidth, setChildrenWidth] = useState(0);
  const [childrenHeight, setChildrenHeight] = useState(0);
  const caretVisibility = caret ? "" : "hidden";
  const tooltipVisibility = isTooltipOpen ? "flex" : "hidden";

  const handleMouseEnter = () => {
    if (trigger === "hover") {
      setIsTooltipOpen(true);
    }
  };

  const handleMouseLeave = () => {
    if (trigger === "hover") {
      setIsTooltipOpen(false);
    }
  };

  const handleClick = () => {
    if (trigger === "click") {
      setIsTooltipOpen(!isTooltipOpen);
    }
  };

  useEffect(() => {
    let timer;
    if (isTooltipOpen && timeout) {
      timer = setTimeout(() => {
        setIsTooltipOpen(false);
      }, timeout);
    }
    return () => {
      clearTimeout(timer);
    };
  }, [isTooltipOpen, timeout]);

  const leftStyle = { right: `${childrenWidth}px` };
  const rightSttyle = { left: `${childrenWidth}px` };
  const topStyle = { bottom: `${childrenHeight}px` };
  const bottomStyle = { top: `${childrenHeight}px` };

  const selectedStyle =
    position === "left"
      ? leftStyle
      : position === "right"
      ? rightSttyle
      : position === "top" ||
        position === "top-right" ||
        position === "top-left"
      ? topStyle
      : position === "bottom" ||
        position === "bottom-right" ||
        position === "bottom-left"
      ? bottomStyle
      : "";

  return (
    <div>
      <div className="flex items-center justify-center w-screen h-screen">
        <div
          className={`tooltip-outer-class tooltip-outer-class-${position}`}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          onClick={handleClick}
        >
          <div ref={childrenRef}>{props.children}</div>
          <div
            className={`tooltip-box-outer-class tooltip-box-outer-class-${position} ${tooltipVisibility}`}
            style={selectedStyle}
          >
            <span
              className={`tooltip-box-class tooltip-box-class-${position} bg-${variant}`}
            >
              {content}
            </span>
            <div
              className={`tooltip-arrow-position-class tooltip-arrow-position-class-${position} bg-${variant} ${caretVisibility}`}
            ></div>
          </div>
        </div>
      </div>
    </div>
  );
}

Tooltip.propTypes = {
  position: PropTypes.string,
  content: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element,
    PropTypes.number,
  ]).isRequired,
  caret: PropTypes.bool,
  trigger: PropTypes.oneOf(["click", "hover"]),
  timeout: PropTypes.number,
  variant: PropTypes.oneOf([
    "primary",
    "secondary",
    "tertiary",
    "success",
    "danger",
    "warning",
    "clear",
  ]),
};

Tooltip.defaultProps = {
  position: "top",
  content: null,
  caret: true,
  trigger: "hover",
  timeout: 3000,
  variant: "primary",
};

export default Tooltip;

// Primary: Background #6A13F4, Color: #FFFFFF
// Secondary: Background #F0E7FE, Color: #6A13F4
// Tertiary: Background #EBEBEB, Color: #000000
// Success: Background #16B050, Color: #000000
// Danger: Background #F43F5E, Color: #000000
// Warning: Background #F3C318, Color: #000000



<div className="flex items-center justify-center w-screen h-screen">
        <div
          className={tooltipOuterClass}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          onClick={handleClick}
        >
          <div ref={childrenRef}>{props.children}</div>
          <div className={tooltipBoxOuterClass} style={selectedStyle}>
            <span className={tooltipBoxClass}>{content}</span>
            <div className={tooltipArrowPositionClass}></div>
          </div>
        </div>
      </div>





import React, { useState } from 'react';

const Tooltip = ({ content, children }) => {
  const [showTooltip, setShowTooltip] = useState(false);

  const handleMouseEnter = () => {
    setShowTooltip(true);
  };

  const handleMouseLeave = () => {
    setShowTooltip(false);
  };

  return (
    <div className="relative">
      <div
        className="inline-block"
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        {children}
      </div>
      {showTooltip && (
        <div className="absolute top-0 left-full ml-2 mt-1 bg-gray-200 p-2 rounded">
          {content}
        </div>
      )}
    </div>
  );
};

export default Tooltip;



 return (
    <div
      className="relative flex w-fit flex-col group"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onClick={handleClick}
    >
      <div ref={childrenRef}>{props.children}</div>
      <div className="absolute mb-1 flex-col ml-2 mr-2 flex bottom-full">
        <span className="relative  z-10 px-3 py-2 font-medium bg-[#6A13F4] text-[#FFFFFF] rounded-[8px] max-w-[200px] flex-grow max-h-[200px] overflow-y-auto">
          {content}
        </span>
        <div className="w-[12px] h-[12px] rounded-[1px] ml-[10px] -mt-2 rotate-45 bg-[#6A13F4] "></div>
      </div>
    </div>
  );

  return (

);




 <div className="relative inline-block">
      <div className="group inline-block">
        {props.children}
      </div>
      <div className="absolute group-hover:block bg-gray-900 text-white text-xs px-2 py-1 rounded-lg whitespace-nowrap">
        {content}
      </div>
    </div>



      <div>
      <div>
        <span class="tooltip with-width-max-content" data-tooltip={content}>
          Tooltip
        </span>
        with max-content and max-width and long text
      </div>
    </div>











    
  const tooltipOuterClass = `relative inline-flex cursor-pointer ${
    position === "top" || position === "bottom"
      ? "justify-center"
      : position === "left" || position === "right"
      ? "items-center"
      : position === "top-right" || position === "bottom-right"
      ? "justify-end"
      : position === "top-left" || position === "bottom-left"
      ? "justify-start"
      : ""
  }`;



    const tooltipBoxClass = `relative ${
    position === "left" || position === "right" ? "flex-1" : ""
  } z-10 px-3 py-2 font-medium ${
    variant === "primary"
      ? "bg-[#6A13F4] text-[#FFFFFF]"
      : variant === "secondary"
      ? "bg-[#F0E7FE] text-[#6A13F4]"
      : variant === "tertiary"
      ? "bg-[#EBEBEB] text-[#000000]"
      : variant === "success"
      ? "bg-[#16B050] text-[#FFFFFF]"
      : variant === "danger"
      ? "bg-[#F43F5E] text-[#FFFFFF]"
      : variant === "warning"
      ? "bg-[#F3C318] text-[#FFFFFF]"
      : variant === "clear"
      ? "bg-white text-black"
      : ""
  } rounded-[8px] max-w-[200px] w-max max-h-[200px] overflow-y-auto`;


    const tooltipBoxOuterClass = `absolute ${
    position === "top"
      ? `flex-col mb-1 items-center`
      : position === "bottom"
      ? `mt-1 flex-col-reverse items-center`
      : position === "left"
      ? `mr-1 items-center`
      : position === "right"
      ? `flex-row-reverse ml-1 items-center`
      : position === "top-left"
      ? `mb-1 flex-col ml-2`
      : position === "bottom-left"
      ? `flex-col-reverse mt-1 ml-2 `
      : position === "top-right"
      ? `mb-1 flex-col items-end mr-2`
      : position === "bottom-right"
      ? "mt-1 flex-col-reverse items-end mr-2"
      : ""
  } flex ${
    position === "top" || position === "top-right" || position === "top-left"
      ? "bottom-full"
      : position === "bottom" ||
        position === "bottom-right" ||
        position === "bottom-left"
      ? "top-full"
      : position === "left"
      ? "right-full"
      : position === "right"
      ? "left-full"
      : ""
  }`;


  const tooltipArrowPositionClass = `w-[12px] h-[12px] rounded-[1px] ${
    position === "top"
      ? "-mt-2"
      : position === "bottom"
      ? "-mb-2"
      : position === "left"
      ? "-ml-2"
      : position === "right"
      ? "-mr-2"
      : position === "top-left"
      ? "ml-[10px] -mt-2"
      : position === "bottom-left"
      ? "-mb-2 ml-[10px]"
      : position === "top-right"
      ? "mr-[10px] -mt-2"
      : position === "bottom-right"
      ? "mr-[10px] -mb-2"
      : ""
  } rotate-45 ${
    variant === "primary"
      ? "bg-[#6A13F4]"
      : variant === "secondary"
      ? "bg-[#F0E7FE]"
      : variant === "tertiary"
      ? "bg-[#EBEBEB]"
      : variant === "success"
      ? "bg-[#16B050]"
      : variant === "danger"
      ? "bg-[#F43F5E]"
      : variant === "warning"
      ? "bg-[#F3C318]"
      : variant === "clear"
      ? "bg-white"
      : ""
  } ${caretVisibility}`;


  const tooltipOuterClass = `tooltip-outer-class tooltip-outer-class-${position}`;
  const tooltipBoxOuterClass = `tooltip-box-outer-class tooltip-box-outer-class-${position}`;
  const tooltipBoxClass = `tooltip-box-class tooltip-box-class-${position} bg-${variant} shadow-${shadow} ${tooltipVisibility}`;
  const tooltipCaretPositionClass = `tooltip-caret-position-class tooltip-caret-position-class-${position} bg-${variant} ${caretVisibility} z-20`;


  import React from "react";

const DropdownMenu = ({ children }) => {
  const menuItems = React.Children.map(children, (child, index) => {
    // Assign a unique ID to each child
    const itemId = `dropdown-item-${index}`;

    // Clone the child element and add the ID as a prop
    const clonedChild = React.cloneElement(child, { id: itemId });

    return clonedChild;
  });

  return <div className="flex flex-col gap-y-1">{menuItems}</div>;
};

export default DropdownMenu;



import React, { useState } from "react";

const Dropdown = ({ children }) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className="dropdown">
      <DropdownToggle toggleDropdown={toggleDropdown}>
        {children[0]}
      </DropdownToggle>
      {isOpen && (
        <DropdownMenu>
          {React.Children.map(children.slice(1), (child, index) => (
            child.type === DropdownItem ? (
              React.cloneElement(child, { key: index })
            ) : null
          ))}
        </DropdownMenu>
      )}
    </div>
  );
};

const DropdownToggle = ({ toggleDropdown, children }) => (
  <button className="dropdown-toggle" onClick={toggleDropdown}>
    {children}
  </button>
);

const DropdownMenu = ({ children }) => (
  <div className="dropdown-menu">
    {children}
  </div>
);

const DropdownItem = ({ children }) => (
  <div className="dropdown-item">{children}</div>
);

export default function App() {
  return (
    <Dropdown>
      <DropdownToggle>click</DropdownToggle>
      <DropdownMenu>
        <DropdownItem>hello</DropdownItem>
        <DropdownItem>hello</DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}


import React, { useState } from "react";
import PropTypes from "prop-types";

function DropdownItem({ onDropdownItemClick, itemId, trigger, ...props }) {
  const [isHovered, setIsHovered] = useState(false);

  const handleTrigger = () => {
    if (trigger === "click") {
      if (onDropdownItemClick) {
        onDropdownItemClick(itemId);
      }
    } else if (trigger === "hover") {
      setIsHovered(true);
      if (onDropdownItemClick && isHovered) {
        onDropdownItemClick(itemId);
      }
    }
  };

  return (
    <div
      role="presentation"
      className={`p-1 text-xs flex items-center gap-x-1 cursor-pointer ${
        isHovered ? "bg-gray-200" : ""
      }`}
      onClick={handleTrigger}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div>{props.children}</div>
    </div>
  );
}

DropdownItem.propTypes = {
  onDropdownItemClick: PropTypes.func,
  itemId: PropTypes.string,
  trigger: PropTypes.oneOf(["click", "hover"]),
};

DropdownItem.defaultProps = {
  onDropdownItemClick: () => {},
  trigger: "click",
};

export default DropdownItem;


import React, { useEffect, useState, useRef } from "react";
import PropTypes from "prop-types";

const Dropdown = ({ isOpen, children }) => {
  const [open, setOpen] = useState(isOpen);
  const dropdownRef = useRef(null);

  const toggleDropdown = (e) => {
    e.stopPropagation();
    setOpen(!open);
  };

  const closeDropdownMenu = () => {
    setOpen(false);
  };

  useEffect(() => {
    setOpen(isOpen);
  }, [isOpen]);

  const dropdownClassName = `relative ml-[120px] w-fit`;

  const dropdownFirstChildrenClassName = `action-dropdown absolute mt-1 p-1 right-0 bg-white rounded-sm  shadow-[0px_1px_2px_rgba(0,0,0,0.3),0px_1px_3px_1px_rgba(0,0,0,0.15)] min-w-[120px]
  ${open ? "visible" : "hidden"}`;

  return (
    <div className={dropdownClassName}>
      <div
        role="presentation"
        className="flex items-center justify-between cursor-pointer"
        onClick={toggleDropdown}
      >
        {children[0]}
      </div>
      <div ref={dropdownRef} className={dropdownFirstChildrenClassName}>
        {React.Children.map(children[1], (child) => {
          return React.cloneElement(child, {
            closeDropdown: closeDropdownMenu,
          });
        })}
      </div>
    </div>
  );
};

Dropdown.propTypes = {
  isOpen: PropTypes.bool,
  children: PropTypes.array,
  isDisable: PropTypes.bool,
};

Dropdown.defaultProps = {
  isOpen: false,
  children: null,
  isDisable: false,
};

export default Dropdown;


<div className="relative m-4 flex flex-col h-screen">
  <div className="flex-grow">
    <div>
      <div>
        <SCInput
          label="Deliver to"
          placeholder="V Corporate Center"
          className="mb-4"
          inputClass="border"
        />
      </div>
      <SCInput
        label="Select your Branch"
        placeholder="Search for branches"
        inputClass="border"
      />
      <SCInput label="Selected Branch" inputClass="border" />
    </div>
  </div>

  <div className="flex-shrink-0">
    <SCButton className="w-full">Confirm</SCButton>
  </div>
</div>


 <div className="h-screen">
      <div className="px-4 py-2 shadow-lg">
        <div className="flex items-center gap-x-2">
          <div>
            <BsArrowLeft className="text-primary" />
          </div>
          <div className="text-[16px] font-medium">Branches Near You</div>
        </div>
      </div>
      <div className="relative m-4 flex flex-col h-full">
        <div>
          <div>
            <SCInput
              label="Deliver to"
              placeholder="V Corporate Center"
              className="mb-4"
              inputClass="border"
            />
          </div>
          <SCInput
            label="Select your Branch"
            placeholder="Search for branches"
            inputClass="border"
          />
          <SCInput label="Selected Branch" inputClass="border" />
        </div>

        <div>
          <SCButton className="w-full"> Confirm</SCButton>
        </div>
      </div>
    </div>



    import React, { useState, useEffect } from 'react';

const Autocomplete = () => {
  const [inputValue, setInputValue] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'ArrowUp') {
        e.preventDefault();
        setSelectedSuggestionIndex((prevIndex) => {
          const newIndex = prevIndex - 1;
          if (newIndex < 0) {
            return suggestions.length - 1;
          }
          return newIndex;
        });
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        setSelectedSuggestionIndex((prevIndex) => {
          const newIndex = prevIndex + 1;
          if (newIndex >= suggestions.length) {
            return 0;
          }
          return newIndex;
        });
      }
    };

    document.addEventListener('keydown', handleKeyDown);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [suggestions]);

  const handleInputChange = (e) => {
    const value = e.target.value;
    setInputValue(value);
    // Update suggestions based on the input value
    // (e.g., fetchSuggestions(value));
  };

  return (
    <div>
      {/* Input field */}
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        placeholder="Type here..."
      />

      {/* Suggestions */}
      <ul>
        {suggestions.map((item, index) => (
          <li
            key={item}
            className={index === selectedSuggestionIndex ? 'selected' : ''}
          >
            {item}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Autocomplete;


const handleInputChange = (e) => {
    const value = e.target.value;
    setInputValue(value);

    if (value.length >= 3) {
      // Fetch suggestions based on the input value
      // (e.g., fetchSuggestions(value));
    } else {
      setSuggestions([]); // Reset suggestions when input length is less than 3
    }
  };

  return (
    <div>
  
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        placeholder="Type here..."
      />


      <ul>
        {suggestions.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
    </div>
  );


export default Autocomplete;
In this example, the condition if (value.length >= 3) is added in the handleInputChange function to check if the input value has at least three characters. If it meets the minimum length requirement, you can proceed to fetch suggestions based on the input value. Otherwise, the suggestions are reset to an empty array.

Make sure to implement the logic to fetch suggestions from an API or a predefined list based on the input value.

function findMatches(wordToMatch, cities) {
  return cities.filter((place) => {
    const regex = new RegExp(wordToMatch, "gi");
    return place.city.match(regex) || place.state.match(regex);
  });
}




const placeAutoCompleteMockData = PlaceAutoCompleteMockData;
  const [inputValue, setInputValue] = useState("");
  const [suggestions, setSuggestions] = useState([]);

  const fetchSuggestions = (value) => {
    const filteredSuggestions = placeAutoCompleteMockData.filter((item) => {
      const regex = new RegExp(value, "gi");
      return item.address.toLowerCase().match(regex);
    });
    setSuggestions(filteredSuggestions);
  };

  const onSelectALocation = (e) => {
    const selectedLocation = e.target.innerText;
    setInputValue(selectedLocation);
  };

  const handleInputChange = (e) => {
    const value = e.target.value;
    setInputValue(value);

    if (value.length >= 3) {
      fetchSuggestions(value);
    } else {
      setSuggestions([]);
    }
  };

  return (
    <div>
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        placeholder="Type here..."
      />

      <ul>
        {suggestions.map((item) => (
          <div key={item.place_id} className="px-12 py-8 divide-y shadow">
            <li className="text-xs" onClick={(e) => onSelectALocation(e)}>
              {item.address}
            </li>
          </div>
        ))}
      </ul>

      <SCButton label="Confirm" disabled />
    </div>
  );


  import React, { useEffect } from 'react';

const LocationAccess = () => {
  useEffect(() => {
    const askForLocationAccess = async () => {
      try {
        // Check if the Geolocation API is supported
        if (navigator.geolocation) {
          // Prompt for location access
          await navigator.permissions.query({ name: 'geolocation' });

          // Check if permission is granted
          if (navigator.permissions && navigator.permissions.state === 'granted') {
            // Location access granted
            navigator.geolocation.getCurrentPosition(
              (position) => {
                // Handle successful location access
                const { latitude, longitude } = position.coords;
                console.log('Location accessed:', latitude, longitude);
              },
              (error) => {
                // Handle error or denied location access
                console.error('Error accessing location:', error.message);
              }
            );
          } else {
            // Location access denied
            console.log('Location access denied.');
          }
        } else {
          // Geolocation API not supported
          console.error('Geolocation is not supported by this browser.');
        }
      } catch (error) {
        console.error('Error occurred while accessing location:', error);
      }
    };

    askForLocationAccess();
  }, []);

  return (
    <div>
      <h2>Location Access</h2>
      {/* Your component JSX */}
    </div>
  );
};

export default LocationAccess;
import React from 'react';
import { Story } from '@storybook/react';
import SCTooltip from './SCTooltip';

export default {
  title: 'Components/SCTooltip',
  component: SCTooltip,
};

const Template: Story = (args) => <SCTooltip {...args}>Your Children Component Here</SCTooltip>;

export const Default = Template.bind({});
Default.args = {
  className: 'inline-flex',
  content: 'nishat tafannum',
  position: 'bottom',
  shadow: 'lg',
  timeout: 10000,
  trigger: 'click',
  variant: 'danger',
};
