 const [dragging, setDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);
  const gridRef = useRef(null);

  const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      const walk = (x - startX) * 3;
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };




 <div className="bg-white rounded w-[72px] h-[72px] mr-[16px] mt-[16px] mb-[16px]">
      <div className="flex justify-between items-center">
        <h2 className="text-sm font-medium">Card Title</h2>
        <div className="relative inline-block text-left">
          <button
            onClick={handleDropdownToggle}
            className="focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen && (
            <div className="absolute z-10 right-0 mt-2 w-30 rounded shadow-lg bg-white divide-y divide-gray-100">
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Delete
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>

      // const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  // const handleDropdownToggle = () => {
  //   setIsDropdownOpen(!isDropdownOpen);
  // };

    const handleDeleteGrid = (index) => {
    const newGrid = [...grid];
    newGrid.splice(index, 1);
    setGrid(newGrid);
  };



   <div className=" bg-purple-500 min-w-[104px] max-w-[368px] h-[104px] m-6 rounded hello">
      <div className="relative bg-purple-500 rounded">
        <div
          // onMouseDown={handleMouseDown}
          // onMouseMove={handleMouseMove}
          // onMouseLeave={handleMouseUp}
          // onMouseUp={handleMouseUp}
          ref={gridRef}
          className="cursor cursor-pointer flex flex-row overflow-x-scroll min-w-[102px] max-w-[280px] pl-[8px]"
        >
          <Grid
            grid={grid}
            handleDeleteGrid={handleDeleteGrid}
            handleDropdownToggle={handleDropdownToggle}
            isDropdownOpen={isDropdownOpen}
            dropdown={dropdown}
          />
        </div>
        <div
          onClick={handleAddGrid}
          className="cursor-pointer p-[10px] text-4xl cursor-ponter bg-white rounded w-[72px] h-[72px] "
        >
          +
        </div>
      </div>
    </div>

     <button
            onClick={(e) => handleDropdownToggle(index)}
            className="focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen[index] && (
            <div className="absolute z-10 right-0 mt-2 w-30 rounded shadow-lg bg-white divide-y divide-gray-100">
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button
                  onClick={() => handleDeleteGrid(index)}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                >
                  Delete
                </button>
              </div>
            </div>
          )}












          <Grid
            grid={grid}
            handleDeleteGrid={handleDeleteGrid}
            handleDropdownToggle={handleDropdownToggle}
            isDropdownOpen={isDropdownOpen}
            dropdown={dropdown}
          />

            <div className="bg-purple-500 w-fit max-w-[368px] rounded m-4">
      <div className="flex relative bg-purple-500 rounded">
        <div
          // onMouseDown={handleMouseDown}
          // onMouseMove={handleMouseMove}
          // onMouseLeave={handleMouseUp}
          // onMouseUp={handleMouseUp}
          ref={gridRef}
          className="cursor cursor-pointer flex flex-row overflow-x-scroll w-fit max-w-[280px] space-x-4"
        >
          
        </div>
        <div
          onClick={handleAddGrid}
          className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
        >
          +
        </div>
      </div>



      {checkArrayLength ? (
            <div
              ref={gridRef}
              className="pl-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[260px]"
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
              />
            </div>
          ) : null}
          {checkArrayLength < 8 ? (
            <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">
              <div
                onClick={handleAddGrid}
                className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
              >
                +
              </div>
            </div>
          ) : null}




            const handleMouseDown = (event) => {
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      console.log("x", x);
      const walk = x - startX;
      console.log("walk", walk);
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };

    const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      const walk = x - startX;
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

    const handleMouseUp = () => {
    setDragging(false);
  };


    <div className="relative flex bg-purple-500 rounded">
          {checkArrayLength === 0 ? (
            null
          ) : checkArrayLength === 8 ? (
            <div
              ref={sliderRef}
              className="absolute pl-4 pr-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[368px]"
              onScroll={handleScroll}
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
                scrollLeft = {scrollLeft}
                sliderRef = {sliderRef}
              />
            </div>
          ) : (
            <div
              ref={sliderRef}
              className="pl-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[264px]"
              onScroll={handleScroll}
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
                handleScroll = {handleScroll}
                scrollLeft = {scrollLeft}
                sliderRef = {sliderRef}
              />
            </div>
          )}
          {checkArrayLength < 8 ? (
            <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">
              <div
                onClick={handleAddGrid}
                className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
              >
                +
              </div>
            </div>
          ) : null}
        </div>



        
          <button
            onClick={(e) =>{
              handleDropdownToggle(index)
            }}
            className=" focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen[index] && (
            <div className={`absolute z-30 left-0 mt-2 w-[100px] rounded shadow-lg bg-white divide-y divide-gray-100`}>
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button
                  onClick={() => handleDeleteGrid(index)}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                >
                  Delete
                </button>
              </div>
            </div>
          )}

             <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">




              <div>
        <div className="relative flex bg-purple-500 rounded">
       <div className="relative max-w-[368px]">
       <div className="absolute pl-4 pr-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit ">
            <Grid
              grid={grid}
              handleDeleteGrid={handleDeleteGrid}
              handleDropdownToggle={handleDropdownToggle}
              isDropdownOpen={isDropdownOpen}
              dropdown={dropdown}
              scrollLeft={scrollLeft}
              sliderRef={sliderRef}
            />
          </div>
       </div>
        </div>

        <div
          onClick={handleAddGrid}
          className="relative cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
        >
          +
        </div>
      </div>




        <div className="flex w-[50px] h-[30px] justify-end pr-2">{day}</div>
      <div class="flex-auto bg-blue-100 border border-l-gray-400 border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white border-r-gray-400"></div>                  

       <div className="h-8 relative bg-indigo-200">
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: "27%" }}
        ></div>
      </div>




      import React from "react";

function HoursSlot({
  hour,
  end_hours,
  end_minutes,
  trackEndHour,
  start_minutes,
  start_hours,
  trackStartHour,
}) {
  return (
    <div>
      {hour === end_hours ? (
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: `${(end_minutes * 100) / 60}%` }}
        ></div>
      ) : (
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: `${trackEndHour[hour] ? 100 : 0}%` }}
        ></div>
      )}
      {hour === start_hours ? (
        <div
          className="absolute inset-0 bg-blue-100"
          style={{ width: `${(start_minutes * 100) / 60}%` }}
        ></div>
      ) : (
        <div
          className="absolute inset-0 bg-blue-100"
          style={{ width: `${trackStartHour[hour] ? 100 : 0}%` }}
        ></div>
      )}
    </div>
  );
}

export default HoursSlot;




       {selectedAll ? (
            <div
              onClick={selectAll}
              className="px-4 py-2 rounded flex-1 ml-3 text-center bg-purple-500 text-white transition-all ease-in cursor-pointer duration-400"
            >
              All
            </div>
          ) : (
            <div
              onClick={selectAll}
              className="px-4 py-2 border-purple-200 border text-purple-500 rounded flex-1 ml-3 text-center transition-all ease-in cursor-pointer duration-400"
            >
              All
            </div>
          )}

            // const selectAll = () => {
  //   const value = !selectedAll;
  //   setSelectedAll(value);
  //   setSingleSelected(() => {
  //     const newState = { ...singleSelected };
  //     for (let i = 0; i < selectedButton; i++) {
  //       newState[i] = value;
  //     }
  //     return newState;
  //   });
  // };



  import React, { useEffect, useState } from "react";
import DaySlot from "./DaySlot";
import FoodAvailability from "../../json/food_availability.json";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import "../../lib/css/allspark.min.css";

function TimeSlot() {
  const foodAvailability = FoodAvailability;
  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const color = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const [foodSlot, setFoodSlot] = useState({});

  foodAvailability.food_availability.forEach((obj) => {
    for (const [key, value] of Object.entries(obj)) {
      if (!foodSlot[key]) {
        foodSlot[key] = {};
      }
      foodSlot[key][foodAvailability.food_availability.indexOf(obj)] =
        value.slots[0];
    }
  });

  const foodSlotArray = Object.values(foodSlot);

  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const slot = foodSlotArray[selectedIndex];
  const timeSlot = Object.values(slot);
  const [slots, setSlots] = useState(timeSlot);
  const [dayFoodSlot, setDayFoodSlot] = useState(foodSlot[selectedIndex]);


  const sortedColor = Object.values(dayFoodSlot)
    .map((value, index) => {
      const start_time = value.start_time;
      return { start_time, index };
    })
    .sort((a, b) => b.start_time - a.start_time)
    .map(({ index }) => color[index]);

  const daySlots = Object.values(dayFoodSlot).sort((a, b) => {
    return b.start_time - a.start_time;
  });


  useEffect(() => {
    setSlots(timeSlot);
   
  }, [selectedIndex]);

  useEffect(()=>{
    setDayFoodSlot(slots)
  }, [slots])


  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = {...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index) => {
    const tempSlot = [...timeSlot];
    tempSlot.splice(index, 1);
    setSlots(tempSlot);

  };

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return  (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              color={color}
              dayFoodSlot={dayFoodSlot}
              sortedColor={sortedColor}
              daySlots={daySlots}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div className="flex-col mt-6 ml-[45px]">
        {slots.map((s, index) => {
          return (
            <div className="w-full flex justify-between" key={index}>
              <div className="px-4 py-2 rounded flex-1 ">
                <SCTimepicker label="Start Time" value={s.start_time} />
              </div>
              <div className="px-4 py-2 rounded flex-1">
                <SCTimepicker label="End Time" value={s.end_time} />
              </div>
              <div
                onClick={(e) => removeSlot(index)}
                className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
              >
                <div>Remove Hour</div>
              </div>
              <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                <div>Custom Hours</div>
              </div>
            </div>
          );
        })}
      </div>
      <div>
        <SCButton
          size="lg"
          variant="primary-outline"
          className="ml-[60px] mt-4"
        >
          <span className="ml-2">Add New Hour</span>
        </SCButton>
      </div>
    </div>
  );
}

export default TimeSlot;


import React, { useState } from "react";
import HourSlots from "./Slots";

function TimeDivision({ day, dayFoodSlot, sortedColor,daySlots}) {

  console.log(daySlots)
  const divs = Array.from({ length: 24 }, (_, hour) => (
    <div
      key={hour}
      className="w-1/6 h-10 bg-blue-100 border border-white relative "
    >
      {daySlots.map((slot, index) => {
        return (
          <HourSlots
            key={index}
            hour={hour}
            start_time={slot.start_time}
            end_time={slot.end_time}
            color={sortedColor[index]}
          />
        );
      })}
    </div>
  ));
  return (
    <div className="flex">
      <div className="flex w-[250px] h-[30px] justify-end pr-2 text-xl">
        {day}
      </div>
      {divs}
    </div>
  );
}

export default TimeDivision;

    // console.log(slots)

    // console.log(i);

    // const tempFoodSlot = [...foodSlotArray]

    // const temp = tempFoodSlot.forEach((food, index) => {
    //   if (index === selectedIndex) {
    //     const f = Object.values(food);
    //     f.splice(i, 1);
    //     setSlots(f);
    //   }
    // });

    // console.log(temp)

    // setFoodSlot({})

    // console.log("hi");

    // console.log(tempFoodSlot)

    // console.log(foodSlotArray)
    // const newFoodSlot = { ...foodSlot };
    // console.log(slots);
    // newFoodSlot[selectedIndex] = { ...slots };
    // console.log("newFoodSlot", newFoodSlot);



      modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
  
    Object.entries(available_times).forEach(times=>{
      for(const [key, value] of Object.entries(times)){
        if(!tempFoodSlot2[key]){
          tempFoodSlot2[key] = {}
        }
      }
    }) 
    
  });
  
  console.log("tempFoodSlot2", tempFoodSlot2)

  foodAvailability.forEach((obj) => {
    for (const [key, value] of Object.entries(obj)) {
      if (!tempFoodSlot[key]) {
        tempFoodSlot[key] = {};
      }
      tempFoodSlot[key][foodAvailability.indexOf(obj)] = value.slots[0];
    }
  });
  const result = {};

  for (let i = 0; i < modified.length; i++) {
    const section = modified[i];
    const available_times = section.available_times;
  
    for (let j = 0; j < 7; j++) {
      const day = available_times[j];
  
      if (!result[j]) {
        result[j] = [];
      }
  
      result[j].push(day);
    }
  }


      {
      "id": 2944,
      "title": "Wingstreet",
      "start_time": 901,
      "end_time": 2159,
      "available_times": {
        "0": {
          "disabled": false,
          "slots": [
            {
              "start_time": 2000,
              "end_time": 2300
            }
          ]
        },
        "1": {
          "disabled": false,
          "slots": [
            {
              "start_time": 700,
              "end_time": 830
            }
          ]
        },
        "2": {
          "disabled": false,
          "slots": [
            {
              "start_time":900,
              "end_time": 1100
            }
          ]
        },
        "3": {
          "disabled": false,
          "slots": [
            {
              "start_time": 30,
              "end_time":  130
            }
          ]
        },
        "4": {
          "disabled": false,
          "slots": [
            {
              "start_time": 400,
              "end_time": 800
            }
          ]
        },
        "5": {
          "disabled": false,
          "slots": [
            {
              "start_time": 400,
              "end_time": 800
            }
          ]
        },
        "6": {
          "disabled": false,
          "slots": [
            {
              "start_time": 745,
              "end_time": 859
            }
          ]
        }
      },
      "days": "0,1,2,3,4,5,6",
      "is_available": true,
      "enabled": true,
      "hidden": false,
      "statuses": [
        {
          "provider_id": 1,
          "hidden": false
        }
      ],
      "sequence": 1,
      "title_v2": {
        "en": "Wingstreet"
      },
      "sub-sections": [
        {
          "id": 64543,
          "title": "Wings",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 1,
          "title_v2": {
            "en": "Wings"
          },
          "items": [
            {
              "id": 86797,
              "title": "Wingstreet - Honey BBQ",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist.",
              "image": "/images/0d3fd6e19b359493eb61da21727ed70501380c28.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Honey BBQ"
              },
              "description_v2": {
                "en": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist."
              }
            },
            {
              "id": 86798,
              "title": "Wingstreet - Garlic Parmesan",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors",
              "image": "/images/eeca8dccf21e8afb9ff558248b9e415ae3ab4e8d.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Garlic Parmesan"
              },
              "description_v2": {
                "en": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors"
              }
            },
            {
              "id": 86799,
              "title": "Wingstreet - Asian Sesame",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish.",
              "image": "/images/dbad6b4c70de8036f133abb71e96c3103d7918ea.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Asian Sesame"
              },
              "description_v2": {
                "en": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish."
              }
            },
            {
              "id": 86800,
              "title": "Wingstreet - Maple Honey Sriracha",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha.",
              "image": "/images/15367c6cf3dc0e5df418e1b38621f5b2dfc183c1.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 4,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Maple Honey Sriracha"
              },
              "description_v2": {
                "en": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha."
              }
            }
          ]
        },
        {
          "id": 64544,
          "title": "Dips.",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 2,
          "title_v2": {
            "en": "Dips."
          },
          "items": [
            {
              "id": 86801,
              "title": "Mayo Mustard Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Mayo Mustard Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86802,
              "title": "Garlic Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Garlic Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86803,
              "title": "Ranch Sauce",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Ranch Sauce"
              },
              "description_v2": {
                "en": ""
              }
            }
          ]
        }
      ]
    },
    {
      "id": 2945,
      "title": "Wingstreet",
      "start_time": 901,
      "end_time": 2159,
      "available_times":{
        "0": {
          "disabled": false,
          "slots": [
            {
              "start_time":30,
              "end_time": 130
            }
          ]
        },
        "1": {
          "disabled": false,
          "slots": [
            {
              "start_time": 2100,
              "end_time": 2330
            }
          ]
        },
        "2": {
          "disabled": false,
          "slots": [
            {
              "start_time": 500,
              "end_time": 630
            }
          ]
        },
        "3": {
          "disabled": false,
          "slots": [
            {
              "start_time": 2000,
              "end_time": 2300
            }
          ]
        },
        "4": {
          "disabled": false,
          "slots": [
            {
              "start_time": 100,
              "end_time": 400
            }
          ]
        },
        "5": {
          "disabled": false,
          "slots": [
            {
              "start_time": 1200,
              "end_time": 1500
            }
          ]
        },
        "6": {
          "disabled": false,
          "slots": [
            {
              "start_time": 1700,
              "end_time": 2100
            }
          ]
        }
      },
      "days": "0,1,2,3,4,5,6",
      "is_available": true,
      "enabled": true,
      "hidden": false,
      "statuses": [
        {
          "provider_id": 1,
          "hidden": false
        }
      ],
      "sequence": 1,
      "title_v2": {
        "en": "Wingstreet"
      },
      "sub-sections": [
        {
          "id": 64543,
          "title": "Wings",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 1,
          "title_v2": {
            "en": "Wings"
          },
          "items": [
            {
              "id": 86797,
              "title": "Wingstreet - Honey BBQ",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist.",
              "image": "/images/0d3fd6e19b359493eb61da21727ed70501380c28.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Honey BBQ"
              },
              "description_v2": {
                "en": "Tossed in a delightfully sweet sauce from the honey side of the street with smokey BBQ twist."
              }
            },
            {
              "id": 86798,
              "title": "Wingstreet - Garlic Parmesan",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors",
              "image": "/images/eeca8dccf21e8afb9ff558248b9e415ae3ab4e8d.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Garlic Parmesan"
              },
              "description_v2": {
                "en": "A buttery blend of garlic and parmesan, a perfect marriage of two great flavors"
              }
            },
            {
              "id": 86799,
              "title": "Wingstreet - Asian Sesame",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish.",
              "image": "/images/dbad6b4c70de8036f133abb71e96c3103d7918ea.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Asian Sesame"
              },
              "description_v2": {
                "en": "A blend of sweet soy goodness and sesame seeds to create that perfect Asian finish."
              }
            },
            {
              "id": 86800,
              "title": "Wingstreet - Maple Honey Sriracha",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 385
                }
              ],
              "vat": 0,
              "description": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha.",
              "image": "/images/15367c6cf3dc0e5df418e1b38621f5b2dfc183c1.png",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 4,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Wingstreet - Maple Honey Sriracha"
              },
              "description_v2": {
                "en": "Sweet meets spicy, for an experience of maple honey and the right kick of Sriracha."
              }
            }
          ]
        },
        {
          "id": 64544,
          "title": "Dips.",
          "description": null,
          "enabled": true,
          "hidden": false,
          "alc_beverages": false,
          "statuses": [
            {
              "provider_id": 1,
              "hidden": false
            }
          ],
          "sequence": 2,
          "title_v2": {
            "en": "Dips."
          },
          "items": [
            {
              "id": 86801,
              "title": "Mayo Mustard Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 1,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Mayo Mustard Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86802,
              "title": "Garlic Dip",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 2,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Garlic Dip"
              },
              "description_v2": {
                "en": ""
              }
            },
            {
              "id": 86803,
              "title": "Ranch Sauce",
              "prices": [
                {
                  "provider_id": 1,
                  "currency_id": 2,
                  "code": "PHP",
                  "symbol": "₱",
                  "price": 25
                }
              ],
              "vat": 0,
              "description": "",
              "image": "",
              "enabled": true,
              "hidden": false,
              "statuses": [
                {
                  "provider_id": 1,
                  "hidden": false
                }
              ],
              "sequence": 3,
              "stock": {
                "available": true,
                "snooze": null
              },
              "title_v2": {
                "en": "Ranch Sauce"
              },
              "description_v2": {
                "en": ""
              }
            }
          ]
        }
      ]
    }





    

  // console.log(slots)
  // const sortedColor = Object.values(dayFoodSlot)
  //   .map((value, index) => {
  //     const start_time = value.start_time;
  //     return { start_time, index };
  //   })
  //   .sort((a, b) => b.start_time - a.start_time)
  //   .map(({ index }) => colors[index]);

  // useEffect(() => {
  //   if (tempColor.length < 7) {
  //     tempColor.push([...sortedColor]);
  //   }
  // }, []);

  // useEffect(() => {
  //   setFoodColor(tempColor[timeSlotIndex]);
  // }, [tempColor.length]);

  // const [foodColor, setFoodColor] = useState([]);



import React, { useState } from 'react';

function App() {
  const [data, setData] = useState({
    "0": {
      "start_time": 1600,
      "end_time": 1730,
      "color": "#79c5f5",
      "id": 2943
    },
    "1": {
      "start_time": 1600,
      "end_time": 1730,
      "color": "#79c5f5",
      "id": 2944
    },
    "2": {
      "start_time": 1600,
      "end_time": 1730,
      "color": "#79c5f5",
      "id": 2945
    }
  });

  const [selectedData, setSelectedData] = useState(null);

  const handleClick = (id) => {
    setSelectedData(data[id]);
  }

  return (
    <div>
      <button onClick={() => handleClick("0")}>Blue</button>
      <button onClick={() => handleClick("1")}>Green</button>
      <button onClick={() => handleClick("2")}>Yellow</button>
      {selectedData &&
        <div>
          <p>Start Time: {selectedData.start_time}</p>
          <p>End Time: {selectedData.end_time}</p>
          <p>Color: {selectedData.color}</p>
          <p>ID: {selectedData.id}</p>
        </div>
      }
    </div>
  );
}

export default App;


import React, { useEffect, useState } from "react";
import { SCTimepicker, SCButton } from "../../lib/index.cjs";

function ProductSlot({
  slots,
  removeSlot,
  singleSelected,
  handleColor,
  setButtonSelected,
  buttonSelected,
}) {
  const buttonTitles = ["blue", "green", "yellow"];
  const [addNewHour, setAddNewHour] = useState([])

  useEffect(() => {
    setButtonSelected([false, false, false]);
  }, [singleSelected]);

  const handleNewSlot = () => {
    console.log(addNewHour);
  };

  console.log(slots)

  return (
    <div>
      <div className="mt-4">
        {buttonTitles.map((title, index) => (
          <SCButton
            key={index}
            variant="primary-outline"
            size="sm"
            action={(e) => handleColor(index)}
          >
            {title}
          </SCButton>
        ))}
      </div>
      <div className="flex-col mt-6 ml-[45px]">
        {slots.map((slot, index) => {
 
          return slot.map((s, index2) => {
            return buttonSelected[index] ? (
              <div className="flex-col">
                <div className="w-full flex justify-between" key={index2}>
                  <div className="px-4 py-2 rounded flex-1 ">
                    <SCTimepicker label="Start Time" value={s.start_time} />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker label="End Time" value={s.end_time} />
                  </div>
                  <div
                    onClick={(e) => removeSlot(index, index2)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ) : null;
          });
        })}
        <SCButton
          size="lg"
          variant="primary-outline"
          className="ml-[20px] mt-4"
          action={handleNewSlot}
        >
          <span className="ml-2">Add New Hour</span>
        </SCButton>
      </div>
    </div>
  );
}

export default ProductSlot;


function handleColor(e, id) {
  const container = document.getElementById('container');
  
  const div = document.createElement('div');
  div.textContent = JSON.stringify(matched);
  container.appendChild(div);
}

function MyButtons() {
  return (
    <div>
      <SCButton
        key={2943}
        variant="primary"
        size="sm"
        action={(e) => handleColor(e, 2943)}
      >
        2943
      </SCButton>
      <SCButton
        key={2945}
        variant="primary"
        size="sm"
        action={(e) => handleColor(e, 2945)}
      >
        2945
      </SCButton>
      <SCButton
        key={2944}
        variant="primary"
        size="sm"
        action={(e) => handleColor(e, 2944)}
      >
        2944
      </SCButton>
      <div id="container"></div>
    </div>
  );
}


const arr = [
  {id: 1, name: 'John'},
  {id: 2, name: 'Jane'},
  {id: 3, name: 'Bob'}
];

const obj = arr.reduce((acc, cur) => {
  acc[cur.id] = cur;
  return acc;
}, {});

console.log(obj);


    <div className="flex-col" key={index}>
              <div className="w-full flex justify-between">
                <div className="px-4 py-2 rounded flex-1">
                  <SCTimepicker
                    label="Start Time"
                    value={s.start_time}
                    handleChange={(value) => {
                      handleStartValue(value, index);
                    }}
                  />
                </div>
                <div className="px-4 py-2 rounded flex-1">
                  <SCTimepicker
                    label="End Time"
                    value={s.end_time}
                    handleChange={(value) => {
                      handleEndValue(value, index);
                    }}
                  />
                </div>
                <div
                  onClick={(e) => removeSlot(selectedSection, index)}
                  className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                >
                  <div>Remove Hour</div>
                </div>
                <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                  <div>Custom Hours</div>
                </div>
              </div>
            </div>



            import React, { useEffect, useState } from "react";
import ModifiedFoodAvailability from "../../json/modified_food_availability.json";
import "../../lib/css/allspark.min.css";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import DaySlot from "./DaySlot";
import Empty from "../../json/empty.json";

function TimeSlot() {
  const colors = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const modified = ModifiedFoodAvailability.sections;
  const id = [];

  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const tempFoodSlot2 = {};

  modified.forEach((m, index) => {
    const temp = Object.values(m.available_times);
    id.push(m.id);
    temp.forEach((t) => {
      t.slots.forEach((s) => {
        s.color = colors[index];
        s.id = m.id;
      });
    });
  });

  modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
    for (const [key, value] of Object.entries(available_times)) {
      if (!tempFoodSlot2[key]) {
        tempFoodSlot2[key] = [];
      }
      tempFoodSlot2[key].push(value.slots);
    }
  });

  const [foodSlot, setFoodSlot] = useState(tempFoodSlot2);
  const foodSlotArray = Object.values(foodSlot);
  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const timeSlot = Object.values(foodSlotArray[selectedIndex]);
  const [slots, setSlots] = useState(timeSlot);
  const sectionButton = [...new Array(3)].map((_, idx) => idx === false);
  const [buttonSelected, setButtonSelected] = useState(sectionButton);

  useEffect(() => {
    setSlots(timeSlot);
  }, [selectedIndex]);

  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index, index2) => {
    const tempSlot = [...timeSlot];
    tempSlot[index]?.splice(index2, 1);
    setSlots(tempSlot);
  };

  useEffect(() => {
    let newFoodSlot = { ...foodSlot };
    newFoodSlot[selectedIndex] = { ...slots };
    setFoodSlot(newFoodSlot);
  }, [slots]);

  const [selectedSection, setSelectedSection] = useState(0);
  const [start, setStart] = useState(0);
  const [end, setEnd] = useState(0);
  const [slot, setSlot] = useState([]);
  const [pid, setPid] = useState(null);

  const handleColor = (e, index) => {
    setPid(e.target.textContent);
    setSlot(slots[index]);
    setSelectedSection(index);
    setButtonSelected(() => {
      const newState = [...buttonSelected];
      if (newState[index] === true) {
        newState[index] = true;
      } else {
        newState[index] = !buttonSelected[index];
      }

      if (newState[index]) {
        for (let i = 0; i < buttonSelected.length; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const handleStartValue = (value, index) => {
    setStart(value);
    const tempSlot = [...slot];
    tempSlot[index].start_time = value;
    setSlot(tempSlot);
    setStart(0);
  };
  const handleEndValue = (value, index) => {
    setEnd(value);
    const tempSlot = [...slot];
    tempSlot[index].end_time = value;
    setSlot(tempSlot);
    setEnd(0);
  };

  const addNewHour = (index) => {
 
    const temp = {};
    temp.start_time = start;
    temp.end_time = end;
    const newData = [...slots];
    newData[index].push(temp);
    setSlot(newData[index]);
    setSlots(newData);
  };

  const allFalse = buttonSelected.every((value) => value === false);

  const idKey = slots.reduce((acc, cur) => {
    cur.forEach((item) => {
      if (acc[item.id]) {
        acc[item.id].push(item);
      } else {
        acc[item.id] = [item];
      }
    });
    return acc;
  }, {});

  console.log(idKey);

  useEffect(() => {
    setButtonSelected(sectionButton);
    setSlot([]);
  }, [selectedIndex]);

  console.log(buttonSelected)

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              daySlot={slots}
              selectedIndex={selectedIndex}
              timeSlotIndex={index}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div>
        <div className="mt-4">
          {buttonSelected.map((_, index) => {
            return buttonSelected[index] ? (
              <SCButton
                key={index}
                variant="primary"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                variant="primary-outline"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            );
          })}
        </div>
        {pid && !allFalse && (
          <div>
            {idKey[pid]?.map((s, index) => (
              <div className="flex-col" key={index}>
                <div className="w-full flex justify-between">
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="Start Time"
                      value={s.start_time}
                      handleChange={(value) => {
                        handleStartValue(value, index);
                      }}
                    />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="End Time"
                      value={s.end_time}
                      handleChange={(value) => {
                        handleEndValue(value, index);
                      }}
                    />
                  </div>
                  <div
                    onClick={(e) => removeSlot(selectedSection, index)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {allFalse ? null : (
          <SCButton
            size="lg"
            variant="primary-outline"
            className="ml-[20px] mt-4"
            action={() => addNewHour(selectedSection)}
          >
            <span className="ml-2">Add New Hour</span>
          </SCButton>
        )}
      </div>
    </div>
  );
}

export default TimeSlot;




import React, { useEffect, useState } from "react";
import ModifiedFoodAvailability from "../../json/modified_food_availability.json";
import "../../lib/css/allspark.min.css";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import DaySlot from "./DaySlot";
import Empty from "../../json/empty.json";

function TimeSlot() {
  const colors = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const modified = Empty.sections;
  const id = [];

  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const tempFoodSlot2 = {};

  modified.forEach((m, index) => {
    const temp = Object.values(m.available_times);
    id.push(m.id);
    temp.forEach((t) => {
      t.slots.forEach((s) => {
        s.color = colors[index];
        s.id = m.id;
      });
    });
  });


  modified.forEach((obj) => {
    const available_times = Object.values(obj.available_times);
    for (const [key, value] of Object.entries(available_times)) {
      if (!tempFoodSlot2[key]) {
        tempFoodSlot2[key] = [];
      }
      tempFoodSlot2[key].push(value.slots);
    }
  });

  console.log(tempFoodSlot2)
  const [foodSlot, setFoodSlot] = useState(tempFoodSlot2);
  const foodSlotArray = Object.values(foodSlot);
  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const timeSlot = Object.values(foodSlotArray[selectedIndex]);
  const [slots, setSlots] = useState(timeSlot);
  const sectionButton = [...new Array(3)].map((_, idx) => idx === false);
  const [buttonSelected, setButtonSelected] = useState(sectionButton);

  useEffect(() => {
    setSlots(timeSlot);
  }, [selectedIndex]);

  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index, index2) => {
    const tempSlot = [...timeSlot];
    tempSlot[index]?.splice(index2, 1);
    setSlots(tempSlot);
  };

  useEffect(() => {
    let newFoodSlot = { ...foodSlot };
    newFoodSlot[selectedIndex] = { ...slots };
    setFoodSlot(newFoodSlot);
  }, [slots]);

  const [selectedSection, setSelectedSection] = useState(0);
  const [start, setStart] = useState(0);
  const [end, setEnd] = useState(0);
  const [slot, setSlot] = useState([]);
  const [pid, setPid] = useState(null);

  function groupById(slots) {
    const idKey = slots.reduce((acc, cur) => {
      cur.forEach((item) => {
        if (acc[item.id]) {
          acc[item.id].push(item);
        } else {
          acc[item.id] = [item];
        }
      });
      return acc;
    }, {});
    return idKey;
  }

  const idKey = groupById(slots);

  const handleColor = (e, index) => {
    setPid(e.target.textContent);
    setSlot(slots[index]);
    setSelectedSection(index);
    setButtonSelected(() => {
      const newState = [...buttonSelected];
      if (newState[index] === true) {
        newState[index] = true;
      } else {
        newState[index] = !buttonSelected[index];
      }

      if (newState[index]) {
        for (let i = 0; i < buttonSelected.length; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const handleStartValue = (value, index) => {
    setStart(value);
    const tempSlot = [...slot];
    tempSlot[index].start_time = value;
    setSlot(tempSlot);
    setStart(0);
  };
  const handleEndValue = (value, index) => {
    setEnd(value);
    const tempSlot = [...slot];
    tempSlot[index].end_time = value;
    setSlot(tempSlot);
    setEnd(0);
  };

  function createArrayWithKey(obj, key) {
    if (!(key in obj)) {
      obj[key] = [];
      obj[key].push({ id: key });
    }
    return obj;
  }

  const addNewHour = (index) => {
    const temp = {};
    temp.start_time = start;
    temp.end_time = end;
    let tempObj = groupById(slots);
    const tempObj2 = createArrayWithKey(tempObj, pid);
    const a = Object.values(tempObj2);
    const newData = [...a];
    newData[index].push(temp);
    setSlot(newData[index]);
    setSlots(newData);
  };

  const allFalse = buttonSelected.every((value) => value === false);

  useEffect(() => {
    setButtonSelected(sectionButton);
    setSlot([]);
  }, [selectedIndex]);

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              daySlot={slots}
              selectedIndex={selectedIndex}
              timeSlotIndex={index}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div>
        <div className="mt-4">
          {buttonSelected.map((_, index) => {
            return buttonSelected[index] ? (
              <SCButton
                key={index}
                variant="primary"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                variant="primary-outline"
                size="sm"
                action={(e) => handleColor(e, index)}
              >
                {id[index]}
              </SCButton>
            );
          })}
        </div>
        {pid && !allFalse && (
          <div>
            {idKey[pid]?.map((s, index) => (
              <div className="flex-col" key={index}>
                <div className="w-full flex justify-between">
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="Start Time"
                      value={s.start_time}
                      handleChange={(value) => {
                        handleStartValue(value, index);
                      }}
                    />
                  </div>
                  <div className="px-4 py-2 rounded flex-1">
                    <SCTimepicker
                      label="End Time"
                      value={s.end_time}
                      handleChange={(value) => {
                        handleEndValue(value, index);
                      }}
                    />
                  </div>
                  <div
                    onClick={(e) => removeSlot(selectedSection, index)}
                    className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
                  >
                    <div>Remove Hour</div>
                  </div>
                  <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                    <div>Custom Hours</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {allFalse ? null : (
          <SCButton
            size="lg"
            variant="primary-outline"
            className="ml-[20px] mt-4"
            action={() => addNewHour(selectedSection)}
          >
            <span className="ml-2">Add New Hour</span>
          </SCButton>
        )}
      </div>
    </div>
  );
}

export default TimeSlot;
