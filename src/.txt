 const [dragging, setDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);
  const gridRef = useRef(null);

  const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      const walk = (x - startX) * 3;
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };




 <div className="bg-white rounded w-[72px] h-[72px] mr-[16px] mt-[16px] mb-[16px]">
      <div className="flex justify-between items-center">
        <h2 className="text-sm font-medium">Card Title</h2>
        <div className="relative inline-block text-left">
          <button
            onClick={handleDropdownToggle}
            className="focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen && (
            <div className="absolute z-10 right-0 mt-2 w-30 rounded shadow-lg bg-white divide-y divide-gray-100">
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Delete
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>

      // const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  // const handleDropdownToggle = () => {
  //   setIsDropdownOpen(!isDropdownOpen);
  // };

    const handleDeleteGrid = (index) => {
    const newGrid = [...grid];
    newGrid.splice(index, 1);
    setGrid(newGrid);
  };



   <div className=" bg-purple-500 min-w-[104px] max-w-[368px] h-[104px] m-6 rounded hello">
      <div className="relative bg-purple-500 rounded">
        <div
          // onMouseDown={handleMouseDown}
          // onMouseMove={handleMouseMove}
          // onMouseLeave={handleMouseUp}
          // onMouseUp={handleMouseUp}
          ref={gridRef}
          className="cursor cursor-pointer flex flex-row overflow-x-scroll min-w-[102px] max-w-[280px] pl-[8px]"
        >
          <Grid
            grid={grid}
            handleDeleteGrid={handleDeleteGrid}
            handleDropdownToggle={handleDropdownToggle}
            isDropdownOpen={isDropdownOpen}
            dropdown={dropdown}
          />
        </div>
        <div
          onClick={handleAddGrid}
          className="cursor-pointer p-[10px] text-4xl cursor-ponter bg-white rounded w-[72px] h-[72px] "
        >
          +
        </div>
      </div>
    </div>

     <button
            onClick={(e) => handleDropdownToggle(index)}
            className="focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen[index] && (
            <div className="absolute z-10 right-0 mt-2 w-30 rounded shadow-lg bg-white divide-y divide-gray-100">
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button
                  onClick={() => handleDeleteGrid(index)}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                >
                  Delete
                </button>
              </div>
            </div>
          )}












          <Grid
            grid={grid}
            handleDeleteGrid={handleDeleteGrid}
            handleDropdownToggle={handleDropdownToggle}
            isDropdownOpen={isDropdownOpen}
            dropdown={dropdown}
          />

            <div className="bg-purple-500 w-fit max-w-[368px] rounded m-4">
      <div className="flex relative bg-purple-500 rounded">
        <div
          // onMouseDown={handleMouseDown}
          // onMouseMove={handleMouseMove}
          // onMouseLeave={handleMouseUp}
          // onMouseUp={handleMouseUp}
          ref={gridRef}
          className="cursor cursor-pointer flex flex-row overflow-x-scroll w-fit max-w-[280px] space-x-4"
        >
          
        </div>
        <div
          onClick={handleAddGrid}
          className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
        >
          +
        </div>
      </div>



      {checkArrayLength ? (
            <div
              ref={gridRef}
              className="pl-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[260px]"
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
              />
            </div>
          ) : null}
          {checkArrayLength < 8 ? (
            <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">
              <div
                onClick={handleAddGrid}
                className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
              >
                +
              </div>
            </div>
          ) : null}




            const handleMouseDown = (event) => {
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      console.log("x", x);
      const walk = x - startX;
      console.log("walk", walk);
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

  const handleMouseUp = () => {
    setDragging(false);
  };

    const handleMouseDown = (event) => {
    event.preventDefault();
    setDragging(true);
    setStartX(event.pageX - gridRef.current.offsetLeft);
    setScrollLeft(gridRef.current.scrollLeft);
  };

  const handleMouseMove = (event) => {
    event.preventDefault();
    if (dragging) {
      const x = event.pageX - gridRef.current.offsetLeft;
      const walk = x - startX;
      gridRef.current.scrollLeft = scrollLeft - walk;
    }
  };

    const handleMouseUp = () => {
    setDragging(false);
  };


    <div className="relative flex bg-purple-500 rounded">
          {checkArrayLength === 0 ? (
            null
          ) : checkArrayLength === 8 ? (
            <div
              ref={sliderRef}
              className="absolute pl-4 pr-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[368px]"
              onScroll={handleScroll}
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
                scrollLeft = {scrollLeft}
                sliderRef = {sliderRef}
              />
            </div>
          ) : (
            <div
              ref={sliderRef}
              className="pl-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit max-w-[264px]"
              onScroll={handleScroll}
            >
              <Grid
                grid={grid}
                handleDeleteGrid={handleDeleteGrid}
                handleDropdownToggle={handleDropdownToggle}
                isDropdownOpen={isDropdownOpen}
                dropdown={dropdown}
                handleScroll = {handleScroll}
                scrollLeft = {scrollLeft}
                sliderRef = {sliderRef}
              />
            </div>
          )}
          {checkArrayLength < 8 ? (
            <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">
              <div
                onClick={handleAddGrid}
                className="cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
              >
                +
              </div>
            </div>
          ) : null}
        </div>



        
          <button
            onClick={(e) =>{
              handleDropdownToggle(index)
            }}
            className=" focus:outline-none hover:bg-gray-100 rounded p-2 transition-colors duration-150 ease-in-out"
          >
            <HiDotsVertical
              className="h-3 w-3 text-gray-400"
              aria-hidden="true"
            />
          </button>
          {isDropdownOpen[index] && (
            <div className={`absolute z-30 left-0 mt-2 w-[100px] rounded shadow-lg bg-white divide-y divide-gray-100`}>
              <div className="py-1">
                <button className="block px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left text-sm">
                  Make Default
                </button>
                <button className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                  Update
                </button>
                <button
                  onClick={() => handleDeleteGrid(index)}
                  className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                >
                  Delete
                </button>
              </div>
            </div>
          )}

             <div className="bg-purple-500 h-[104px] w-[104px] flex justify-center items-center rounded">




              <div>
        <div className="relative flex bg-purple-500 rounded">
       <div className="relative max-w-[368px]">
       <div className="absolute pl-4 pr-4 bg-purple-500 cursor-pointer flex overflow-x-scroll space-x-4 my-4 w-fit ">
            <Grid
              grid={grid}
              handleDeleteGrid={handleDeleteGrid}
              handleDropdownToggle={handleDropdownToggle}
              isDropdownOpen={isDropdownOpen}
              dropdown={dropdown}
              scrollLeft={scrollLeft}
              sliderRef={sliderRef}
            />
          </div>
       </div>
        </div>

        <div
          onClick={handleAddGrid}
          className="relative cursor-pointer text-4xl bg-white rounded w-[72px] h-[72px]"
        >
          +
        </div>
      </div>




        <div className="flex w-[50px] h-[30px] justify-end pr-2">{day}</div>
      <div class="flex-auto bg-blue-100 border border-l-gray-400 border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white "></div>
      <div class="flex-auto bg-blue-100 border border-white border-l-gray-400"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white"></div>
      <div class="flex-auto bg-blue-100 border border-white border-r-gray-400"></div>                  

       <div className="h-8 relative bg-indigo-200">
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: "27%" }}
        ></div>
      </div>




      import React from "react";

function HoursSlot({
  hour,
  end_hours,
  end_minutes,
  trackEndHour,
  start_minutes,
  start_hours,
  trackStartHour,
}) {
  return (
    <div>
      {hour === end_hours ? (
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: `${(end_minutes * 100) / 60}%` }}
        ></div>
      ) : (
        <div
          className="absolute inset-0 bg-blue-500"
          style={{ width: `${trackEndHour[hour] ? 100 : 0}%` }}
        ></div>
      )}
      {hour === start_hours ? (
        <div
          className="absolute inset-0 bg-blue-100"
          style={{ width: `${(start_minutes * 100) / 60}%` }}
        ></div>
      ) : (
        <div
          className="absolute inset-0 bg-blue-100"
          style={{ width: `${trackStartHour[hour] ? 100 : 0}%` }}
        ></div>
      )}
    </div>
  );
}

export default HoursSlot;




       {selectedAll ? (
            <div
              onClick={selectAll}
              className="px-4 py-2 rounded flex-1 ml-3 text-center bg-purple-500 text-white transition-all ease-in cursor-pointer duration-400"
            >
              All
            </div>
          ) : (
            <div
              onClick={selectAll}
              className="px-4 py-2 border-purple-200 border text-purple-500 rounded flex-1 ml-3 text-center transition-all ease-in cursor-pointer duration-400"
            >
              All
            </div>
          )}

            // const selectAll = () => {
  //   const value = !selectedAll;
  //   setSelectedAll(value);
  //   setSingleSelected(() => {
  //     const newState = { ...singleSelected };
  //     for (let i = 0; i < selectedButton; i++) {
  //       newState[i] = value;
  //     }
  //     return newState;
  //   });
  // };



  import React, { useEffect, useState } from "react";
import DaySlot from "./DaySlot";
import FoodAvailability from "../../json/food_availability.json";
import { SCButton, SCTimepicker } from "../../lib/index.cjs";
import "../../lib/css/allspark.min.css";

function TimeSlot() {
  const foodAvailability = FoodAvailability;
  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const color = ["#79c5f5", "#95f7b3", "#f4f57a"];

  const [foodSlot, setFoodSlot] = useState({});

  foodAvailability.food_availability.forEach((obj) => {
    for (const [key, value] of Object.entries(obj)) {
      if (!foodSlot[key]) {
        foodSlot[key] = {};
      }
      foodSlot[key][foodAvailability.food_availability.indexOf(obj)] =
        value.slots[0];
    }
  });

  const foodSlotArray = Object.values(foodSlot);

  const selectedButton = 7;
  const checked = [...new Array(selectedButton)].map((_, idx) => idx === false);
  const [singleSelected, setSingleSelected] = useState(checked);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const slot = foodSlotArray[selectedIndex];
  const timeSlot = Object.values(slot);
  const [slots, setSlots] = useState(timeSlot);
  const [dayFoodSlot, setDayFoodSlot] = useState(foodSlot[selectedIndex]);


  const sortedColor = Object.values(dayFoodSlot)
    .map((value, index) => {
      const start_time = value.start_time;
      return { start_time, index };
    })
    .sort((a, b) => b.start_time - a.start_time)
    .map(({ index }) => color[index]);

  const daySlots = Object.values(dayFoodSlot).sort((a, b) => {
    return b.start_time - a.start_time;
  });


  useEffect(() => {
    setSlots(timeSlot);
   
  }, [selectedIndex]);

  useEffect(()=>{
    setDayFoodSlot(slots)
  }, [slots])


  useEffect(() => {
    setSingleSelected([...checked]);
    setSingleSelected(() => {
      const newState = {...singleSelected };
      newState[0] = true;
      return newState;
    });
  }, [selectedButton]);

  const toggleCheck = (index) => {
    setSelectedIndex(index);
    setSingleSelected(() => {
      const newState = { ...singleSelected };
      newState[index] = !singleSelected[index];
      if (newState[index]) {
        for (let i = 0; i < selectedButton; i++) {
          if (index !== i) {
            newState[i] = false;
          }
        }
      }
      return newState;
    });
  };

  const removeSlot = (index) => {
    const tempSlot = [...timeSlot];
    tempSlot.splice(index, 1);
    setSlots(tempSlot);

  };

  return (
    <div className="p-4">
      <div className="flex-col space-y-2 max-w-screen">
        <div className="flex">
          <div className="w-1/6 text-xl pl-16">00:00</div>
          <div className="w-1/6 text-xl pl-[36px]">04:00</div>
          <div className="w-1/6 text-xl pl-[34px]">08:00</div>
          <div className="w-1/6 text-xl pl-[32px]">12:00</div>
          <div className="w-1/6 text-xl pl-[30px]">16:00</div>
          <div className="w-1/6 text-xl pl-[28px]">20:00</div>
          <div className="text-xl">24:00</div>
        </div>

        {foodSlotArray.map((_, index) => {
          return  (
            <DaySlot
              key={index}
              day={daysOfWeek[index]}
              foodSlot={foodSlotArray[index]}
              color={color}
              dayFoodSlot={dayFoodSlot}
              sortedColor={sortedColor}
              daySlots={daySlots}
            />
          );
        })}
      </div>
      <div className="flex mt-6 ml-[65px]">
        <div className="w-full flex justify-between">
          {checked.map((_, index) => {
            return singleSelected[index] ? (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary"
              >
                {daysOfWeek[index]}
              </SCButton>
            ) : (
              <SCButton
                key={index}
                action={(e) => toggleCheck(index)}
                size="xl"
                variant="primary-outline"
              >
                {daysOfWeek[index]}
              </SCButton>
            );
          })}
        </div>
      </div>

      <div className="flex-col mt-6 ml-[45px]">
        {slots.map((s, index) => {
          return (
            <div className="w-full flex justify-between" key={index}>
              <div className="px-4 py-2 rounded flex-1 ">
                <SCTimepicker label="Start Time" value={s.start_time} />
              </div>
              <div className="px-4 py-2 rounded flex-1">
                <SCTimepicker label="End Time" value={s.end_time} />
              </div>
              <div
                onClick={(e) => removeSlot(index)}
                className="cursor-pointer px-4 py-2 rounded flex-1 text-center mt-7 text-purple-500 font-medium"
              >
                <div>Remove Hour</div>
              </div>
              <div className="px-4 py-2 rounded flex-1 text-center mt-7">
                <div>Custom Hours</div>
              </div>
            </div>
          );
        })}
      </div>
      <div>
        <SCButton
          size="lg"
          variant="primary-outline"
          className="ml-[60px] mt-4"
        >
          <span className="ml-2">Add New Hour</span>
        </SCButton>
      </div>
    </div>
  );
}

export default TimeSlot;


import React, { useState } from "react";
import HourSlots from "./Slots";

function TimeDivision({ day, dayFoodSlot, sortedColor,daySlots}) {

  console.log(daySlots)
  const divs = Array.from({ length: 24 }, (_, hour) => (
    <div
      key={hour}
      className="w-1/6 h-10 bg-blue-100 border border-white relative "
    >
      {daySlots.map((slot, index) => {
        return (
          <HourSlots
            key={index}
            hour={hour}
            start_time={slot.start_time}
            end_time={slot.end_time}
            color={sortedColor[index]}
          />
        );
      })}
    </div>
  ));
  return (
    <div className="flex">
      <div className="flex w-[250px] h-[30px] justify-end pr-2 text-xl">
        {day}
      </div>
      {divs}
    </div>
  );
}

export default TimeDivision;
